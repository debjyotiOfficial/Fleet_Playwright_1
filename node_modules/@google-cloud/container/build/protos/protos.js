// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
(function(global, factory) { /* global define, require, module */

    /* AMD */ if (typeof define === 'function' && define.amd)
        define(["protobufjs/minimal"], factory);

    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)
        module.exports = factory(require("google-gax/build/src/protobuf").protobufMinimal);

})(this, function($protobuf) {
    "use strict";

    // Common aliases
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    
    // Exported root namespace
    var $root = $protobuf.roots._google_cloud_container_protos || ($protobuf.roots._google_cloud_container_protos = {});
    
    $root.google = (function() {
    
        /**
         * Namespace google.
         * @exports google
         * @namespace
         */
        var google = {};
    
        google.container = (function() {
    
            /**
             * Namespace container.
             * @memberof google
             * @namespace
             */
            var container = {};
    
            container.v1 = (function() {
    
                /**
                 * Namespace v1.
                 * @memberof google.container
                 * @namespace
                 */
                var v1 = {};
    
                v1.ClusterManager = (function() {
    
                    /**
                     * Constructs a new ClusterManager service.
                     * @memberof google.container.v1
                     * @classdesc Represents a ClusterManager
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function ClusterManager(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }
    
                    (ClusterManager.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = ClusterManager;
    
                    /**
                     * Creates new ClusterManager service using the specified rpc implementation.
                     * @function create
                     * @memberof google.container.v1.ClusterManager
                     * @static
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     * @returns {ClusterManager} RPC service. Useful where requests and/or responses are streamed.
                     */
                    ClusterManager.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                        return new this(rpcImpl, requestDelimited, responseDelimited);
                    };
    
                    /**
                     * Callback as used by {@link google.container.v1.ClusterManager|listClusters}.
                     * @memberof google.container.v1.ClusterManager
                     * @typedef ListClustersCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.container.v1.ListClustersResponse} [response] ListClustersResponse
                     */
    
                    /**
                     * Calls ListClusters.
                     * @function listClusters
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.IListClustersRequest} request ListClustersRequest message or plain object
                     * @param {google.container.v1.ClusterManager.ListClustersCallback} callback Node-style callback called with the error, if any, and ListClustersResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ClusterManager.prototype.listClusters = function listClusters(request, callback) {
                        return this.rpcCall(listClusters, $root.google.container.v1.ListClustersRequest, $root.google.container.v1.ListClustersResponse, request, callback);
                    }, "name", { value: "ListClusters" });
    
                    /**
                     * Calls ListClusters.
                     * @function listClusters
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.IListClustersRequest} request ListClustersRequest message or plain object
                     * @returns {Promise<google.container.v1.ListClustersResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.container.v1.ClusterManager|getCluster}.
                     * @memberof google.container.v1.ClusterManager
                     * @typedef GetClusterCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.container.v1.Cluster} [response] Cluster
                     */
    
                    /**
                     * Calls GetCluster.
                     * @function getCluster
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.IGetClusterRequest} request GetClusterRequest message or plain object
                     * @param {google.container.v1.ClusterManager.GetClusterCallback} callback Node-style callback called with the error, if any, and Cluster
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ClusterManager.prototype.getCluster = function getCluster(request, callback) {
                        return this.rpcCall(getCluster, $root.google.container.v1.GetClusterRequest, $root.google.container.v1.Cluster, request, callback);
                    }, "name", { value: "GetCluster" });
    
                    /**
                     * Calls GetCluster.
                     * @function getCluster
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.IGetClusterRequest} request GetClusterRequest message or plain object
                     * @returns {Promise<google.container.v1.Cluster>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.container.v1.ClusterManager|createCluster}.
                     * @memberof google.container.v1.ClusterManager
                     * @typedef CreateClusterCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.container.v1.Operation} [response] Operation
                     */
    
                    /**
                     * Calls CreateCluster.
                     * @function createCluster
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ICreateClusterRequest} request CreateClusterRequest message or plain object
                     * @param {google.container.v1.ClusterManager.CreateClusterCallback} callback Node-style callback called with the error, if any, and Operation
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ClusterManager.prototype.createCluster = function createCluster(request, callback) {
                        return this.rpcCall(createCluster, $root.google.container.v1.CreateClusterRequest, $root.google.container.v1.Operation, request, callback);
                    }, "name", { value: "CreateCluster" });
    
                    /**
                     * Calls CreateCluster.
                     * @function createCluster
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ICreateClusterRequest} request CreateClusterRequest message or plain object
                     * @returns {Promise<google.container.v1.Operation>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.container.v1.ClusterManager|updateCluster}.
                     * @memberof google.container.v1.ClusterManager
                     * @typedef UpdateClusterCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.container.v1.Operation} [response] Operation
                     */
    
                    /**
                     * Calls UpdateCluster.
                     * @function updateCluster
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.IUpdateClusterRequest} request UpdateClusterRequest message or plain object
                     * @param {google.container.v1.ClusterManager.UpdateClusterCallback} callback Node-style callback called with the error, if any, and Operation
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ClusterManager.prototype.updateCluster = function updateCluster(request, callback) {
                        return this.rpcCall(updateCluster, $root.google.container.v1.UpdateClusterRequest, $root.google.container.v1.Operation, request, callback);
                    }, "name", { value: "UpdateCluster" });
    
                    /**
                     * Calls UpdateCluster.
                     * @function updateCluster
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.IUpdateClusterRequest} request UpdateClusterRequest message or plain object
                     * @returns {Promise<google.container.v1.Operation>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.container.v1.ClusterManager|updateNodePool}.
                     * @memberof google.container.v1.ClusterManager
                     * @typedef UpdateNodePoolCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.container.v1.Operation} [response] Operation
                     */
    
                    /**
                     * Calls UpdateNodePool.
                     * @function updateNodePool
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.IUpdateNodePoolRequest} request UpdateNodePoolRequest message or plain object
                     * @param {google.container.v1.ClusterManager.UpdateNodePoolCallback} callback Node-style callback called with the error, if any, and Operation
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ClusterManager.prototype.updateNodePool = function updateNodePool(request, callback) {
                        return this.rpcCall(updateNodePool, $root.google.container.v1.UpdateNodePoolRequest, $root.google.container.v1.Operation, request, callback);
                    }, "name", { value: "UpdateNodePool" });
    
                    /**
                     * Calls UpdateNodePool.
                     * @function updateNodePool
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.IUpdateNodePoolRequest} request UpdateNodePoolRequest message or plain object
                     * @returns {Promise<google.container.v1.Operation>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.container.v1.ClusterManager|setNodePoolAutoscaling}.
                     * @memberof google.container.v1.ClusterManager
                     * @typedef SetNodePoolAutoscalingCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.container.v1.Operation} [response] Operation
                     */
    
                    /**
                     * Calls SetNodePoolAutoscaling.
                     * @function setNodePoolAutoscaling
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ISetNodePoolAutoscalingRequest} request SetNodePoolAutoscalingRequest message or plain object
                     * @param {google.container.v1.ClusterManager.SetNodePoolAutoscalingCallback} callback Node-style callback called with the error, if any, and Operation
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ClusterManager.prototype.setNodePoolAutoscaling = function setNodePoolAutoscaling(request, callback) {
                        return this.rpcCall(setNodePoolAutoscaling, $root.google.container.v1.SetNodePoolAutoscalingRequest, $root.google.container.v1.Operation, request, callback);
                    }, "name", { value: "SetNodePoolAutoscaling" });
    
                    /**
                     * Calls SetNodePoolAutoscaling.
                     * @function setNodePoolAutoscaling
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ISetNodePoolAutoscalingRequest} request SetNodePoolAutoscalingRequest message or plain object
                     * @returns {Promise<google.container.v1.Operation>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.container.v1.ClusterManager|setLoggingService}.
                     * @memberof google.container.v1.ClusterManager
                     * @typedef SetLoggingServiceCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.container.v1.Operation} [response] Operation
                     */
    
                    /**
                     * Calls SetLoggingService.
                     * @function setLoggingService
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ISetLoggingServiceRequest} request SetLoggingServiceRequest message or plain object
                     * @param {google.container.v1.ClusterManager.SetLoggingServiceCallback} callback Node-style callback called with the error, if any, and Operation
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ClusterManager.prototype.setLoggingService = function setLoggingService(request, callback) {
                        return this.rpcCall(setLoggingService, $root.google.container.v1.SetLoggingServiceRequest, $root.google.container.v1.Operation, request, callback);
                    }, "name", { value: "SetLoggingService" });
    
                    /**
                     * Calls SetLoggingService.
                     * @function setLoggingService
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ISetLoggingServiceRequest} request SetLoggingServiceRequest message or plain object
                     * @returns {Promise<google.container.v1.Operation>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.container.v1.ClusterManager|setMonitoringService}.
                     * @memberof google.container.v1.ClusterManager
                     * @typedef SetMonitoringServiceCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.container.v1.Operation} [response] Operation
                     */
    
                    /**
                     * Calls SetMonitoringService.
                     * @function setMonitoringService
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ISetMonitoringServiceRequest} request SetMonitoringServiceRequest message or plain object
                     * @param {google.container.v1.ClusterManager.SetMonitoringServiceCallback} callback Node-style callback called with the error, if any, and Operation
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ClusterManager.prototype.setMonitoringService = function setMonitoringService(request, callback) {
                        return this.rpcCall(setMonitoringService, $root.google.container.v1.SetMonitoringServiceRequest, $root.google.container.v1.Operation, request, callback);
                    }, "name", { value: "SetMonitoringService" });
    
                    /**
                     * Calls SetMonitoringService.
                     * @function setMonitoringService
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ISetMonitoringServiceRequest} request SetMonitoringServiceRequest message or plain object
                     * @returns {Promise<google.container.v1.Operation>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.container.v1.ClusterManager|setAddonsConfig}.
                     * @memberof google.container.v1.ClusterManager
                     * @typedef SetAddonsConfigCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.container.v1.Operation} [response] Operation
                     */
    
                    /**
                     * Calls SetAddonsConfig.
                     * @function setAddonsConfig
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ISetAddonsConfigRequest} request SetAddonsConfigRequest message or plain object
                     * @param {google.container.v1.ClusterManager.SetAddonsConfigCallback} callback Node-style callback called with the error, if any, and Operation
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ClusterManager.prototype.setAddonsConfig = function setAddonsConfig(request, callback) {
                        return this.rpcCall(setAddonsConfig, $root.google.container.v1.SetAddonsConfigRequest, $root.google.container.v1.Operation, request, callback);
                    }, "name", { value: "SetAddonsConfig" });
    
                    /**
                     * Calls SetAddonsConfig.
                     * @function setAddonsConfig
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ISetAddonsConfigRequest} request SetAddonsConfigRequest message or plain object
                     * @returns {Promise<google.container.v1.Operation>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.container.v1.ClusterManager|setLocations}.
                     * @memberof google.container.v1.ClusterManager
                     * @typedef SetLocationsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.container.v1.Operation} [response] Operation
                     */
    
                    /**
                     * Calls SetLocations.
                     * @function setLocations
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ISetLocationsRequest} request SetLocationsRequest message or plain object
                     * @param {google.container.v1.ClusterManager.SetLocationsCallback} callback Node-style callback called with the error, if any, and Operation
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ClusterManager.prototype.setLocations = function setLocations(request, callback) {
                        return this.rpcCall(setLocations, $root.google.container.v1.SetLocationsRequest, $root.google.container.v1.Operation, request, callback);
                    }, "name", { value: "SetLocations" });
    
                    /**
                     * Calls SetLocations.
                     * @function setLocations
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ISetLocationsRequest} request SetLocationsRequest message or plain object
                     * @returns {Promise<google.container.v1.Operation>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.container.v1.ClusterManager|updateMaster}.
                     * @memberof google.container.v1.ClusterManager
                     * @typedef UpdateMasterCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.container.v1.Operation} [response] Operation
                     */
    
                    /**
                     * Calls UpdateMaster.
                     * @function updateMaster
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.IUpdateMasterRequest} request UpdateMasterRequest message or plain object
                     * @param {google.container.v1.ClusterManager.UpdateMasterCallback} callback Node-style callback called with the error, if any, and Operation
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ClusterManager.prototype.updateMaster = function updateMaster(request, callback) {
                        return this.rpcCall(updateMaster, $root.google.container.v1.UpdateMasterRequest, $root.google.container.v1.Operation, request, callback);
                    }, "name", { value: "UpdateMaster" });
    
                    /**
                     * Calls UpdateMaster.
                     * @function updateMaster
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.IUpdateMasterRequest} request UpdateMasterRequest message or plain object
                     * @returns {Promise<google.container.v1.Operation>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.container.v1.ClusterManager|setMasterAuth}.
                     * @memberof google.container.v1.ClusterManager
                     * @typedef SetMasterAuthCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.container.v1.Operation} [response] Operation
                     */
    
                    /**
                     * Calls SetMasterAuth.
                     * @function setMasterAuth
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ISetMasterAuthRequest} request SetMasterAuthRequest message or plain object
                     * @param {google.container.v1.ClusterManager.SetMasterAuthCallback} callback Node-style callback called with the error, if any, and Operation
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ClusterManager.prototype.setMasterAuth = function setMasterAuth(request, callback) {
                        return this.rpcCall(setMasterAuth, $root.google.container.v1.SetMasterAuthRequest, $root.google.container.v1.Operation, request, callback);
                    }, "name", { value: "SetMasterAuth" });
    
                    /**
                     * Calls SetMasterAuth.
                     * @function setMasterAuth
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ISetMasterAuthRequest} request SetMasterAuthRequest message or plain object
                     * @returns {Promise<google.container.v1.Operation>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.container.v1.ClusterManager|deleteCluster}.
                     * @memberof google.container.v1.ClusterManager
                     * @typedef DeleteClusterCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.container.v1.Operation} [response] Operation
                     */
    
                    /**
                     * Calls DeleteCluster.
                     * @function deleteCluster
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.IDeleteClusterRequest} request DeleteClusterRequest message or plain object
                     * @param {google.container.v1.ClusterManager.DeleteClusterCallback} callback Node-style callback called with the error, if any, and Operation
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ClusterManager.prototype.deleteCluster = function deleteCluster(request, callback) {
                        return this.rpcCall(deleteCluster, $root.google.container.v1.DeleteClusterRequest, $root.google.container.v1.Operation, request, callback);
                    }, "name", { value: "DeleteCluster" });
    
                    /**
                     * Calls DeleteCluster.
                     * @function deleteCluster
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.IDeleteClusterRequest} request DeleteClusterRequest message or plain object
                     * @returns {Promise<google.container.v1.Operation>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.container.v1.ClusterManager|listOperations}.
                     * @memberof google.container.v1.ClusterManager
                     * @typedef ListOperationsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.container.v1.ListOperationsResponse} [response] ListOperationsResponse
                     */
    
                    /**
                     * Calls ListOperations.
                     * @function listOperations
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.IListOperationsRequest} request ListOperationsRequest message or plain object
                     * @param {google.container.v1.ClusterManager.ListOperationsCallback} callback Node-style callback called with the error, if any, and ListOperationsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ClusterManager.prototype.listOperations = function listOperations(request, callback) {
                        return this.rpcCall(listOperations, $root.google.container.v1.ListOperationsRequest, $root.google.container.v1.ListOperationsResponse, request, callback);
                    }, "name", { value: "ListOperations" });
    
                    /**
                     * Calls ListOperations.
                     * @function listOperations
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.IListOperationsRequest} request ListOperationsRequest message or plain object
                     * @returns {Promise<google.container.v1.ListOperationsResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.container.v1.ClusterManager|getOperation}.
                     * @memberof google.container.v1.ClusterManager
                     * @typedef GetOperationCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.container.v1.Operation} [response] Operation
                     */
    
                    /**
                     * Calls GetOperation.
                     * @function getOperation
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.IGetOperationRequest} request GetOperationRequest message or plain object
                     * @param {google.container.v1.ClusterManager.GetOperationCallback} callback Node-style callback called with the error, if any, and Operation
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ClusterManager.prototype.getOperation = function getOperation(request, callback) {
                        return this.rpcCall(getOperation, $root.google.container.v1.GetOperationRequest, $root.google.container.v1.Operation, request, callback);
                    }, "name", { value: "GetOperation" });
    
                    /**
                     * Calls GetOperation.
                     * @function getOperation
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.IGetOperationRequest} request GetOperationRequest message or plain object
                     * @returns {Promise<google.container.v1.Operation>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.container.v1.ClusterManager|cancelOperation}.
                     * @memberof google.container.v1.ClusterManager
                     * @typedef CancelOperationCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.protobuf.Empty} [response] Empty
                     */
    
                    /**
                     * Calls CancelOperation.
                     * @function cancelOperation
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ICancelOperationRequest} request CancelOperationRequest message or plain object
                     * @param {google.container.v1.ClusterManager.CancelOperationCallback} callback Node-style callback called with the error, if any, and Empty
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ClusterManager.prototype.cancelOperation = function cancelOperation(request, callback) {
                        return this.rpcCall(cancelOperation, $root.google.container.v1.CancelOperationRequest, $root.google.protobuf.Empty, request, callback);
                    }, "name", { value: "CancelOperation" });
    
                    /**
                     * Calls CancelOperation.
                     * @function cancelOperation
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ICancelOperationRequest} request CancelOperationRequest message or plain object
                     * @returns {Promise<google.protobuf.Empty>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.container.v1.ClusterManager|getServerConfig}.
                     * @memberof google.container.v1.ClusterManager
                     * @typedef GetServerConfigCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.container.v1.ServerConfig} [response] ServerConfig
                     */
    
                    /**
                     * Calls GetServerConfig.
                     * @function getServerConfig
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.IGetServerConfigRequest} request GetServerConfigRequest message or plain object
                     * @param {google.container.v1.ClusterManager.GetServerConfigCallback} callback Node-style callback called with the error, if any, and ServerConfig
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ClusterManager.prototype.getServerConfig = function getServerConfig(request, callback) {
                        return this.rpcCall(getServerConfig, $root.google.container.v1.GetServerConfigRequest, $root.google.container.v1.ServerConfig, request, callback);
                    }, "name", { value: "GetServerConfig" });
    
                    /**
                     * Calls GetServerConfig.
                     * @function getServerConfig
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.IGetServerConfigRequest} request GetServerConfigRequest message or plain object
                     * @returns {Promise<google.container.v1.ServerConfig>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.container.v1.ClusterManager|getJSONWebKeys}.
                     * @memberof google.container.v1.ClusterManager
                     * @typedef GetJSONWebKeysCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.container.v1.GetJSONWebKeysResponse} [response] GetJSONWebKeysResponse
                     */
    
                    /**
                     * Calls GetJSONWebKeys.
                     * @function getJSONWebKeys
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.IGetJSONWebKeysRequest} request GetJSONWebKeysRequest message or plain object
                     * @param {google.container.v1.ClusterManager.GetJSONWebKeysCallback} callback Node-style callback called with the error, if any, and GetJSONWebKeysResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ClusterManager.prototype.getJSONWebKeys = function getJSONWebKeys(request, callback) {
                        return this.rpcCall(getJSONWebKeys, $root.google.container.v1.GetJSONWebKeysRequest, $root.google.container.v1.GetJSONWebKeysResponse, request, callback);
                    }, "name", { value: "GetJSONWebKeys" });
    
                    /**
                     * Calls GetJSONWebKeys.
                     * @function getJSONWebKeys
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.IGetJSONWebKeysRequest} request GetJSONWebKeysRequest message or plain object
                     * @returns {Promise<google.container.v1.GetJSONWebKeysResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.container.v1.ClusterManager|listNodePools}.
                     * @memberof google.container.v1.ClusterManager
                     * @typedef ListNodePoolsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.container.v1.ListNodePoolsResponse} [response] ListNodePoolsResponse
                     */
    
                    /**
                     * Calls ListNodePools.
                     * @function listNodePools
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.IListNodePoolsRequest} request ListNodePoolsRequest message or plain object
                     * @param {google.container.v1.ClusterManager.ListNodePoolsCallback} callback Node-style callback called with the error, if any, and ListNodePoolsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ClusterManager.prototype.listNodePools = function listNodePools(request, callback) {
                        return this.rpcCall(listNodePools, $root.google.container.v1.ListNodePoolsRequest, $root.google.container.v1.ListNodePoolsResponse, request, callback);
                    }, "name", { value: "ListNodePools" });
    
                    /**
                     * Calls ListNodePools.
                     * @function listNodePools
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.IListNodePoolsRequest} request ListNodePoolsRequest message or plain object
                     * @returns {Promise<google.container.v1.ListNodePoolsResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.container.v1.ClusterManager|getNodePool}.
                     * @memberof google.container.v1.ClusterManager
                     * @typedef GetNodePoolCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.container.v1.NodePool} [response] NodePool
                     */
    
                    /**
                     * Calls GetNodePool.
                     * @function getNodePool
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.IGetNodePoolRequest} request GetNodePoolRequest message or plain object
                     * @param {google.container.v1.ClusterManager.GetNodePoolCallback} callback Node-style callback called with the error, if any, and NodePool
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ClusterManager.prototype.getNodePool = function getNodePool(request, callback) {
                        return this.rpcCall(getNodePool, $root.google.container.v1.GetNodePoolRequest, $root.google.container.v1.NodePool, request, callback);
                    }, "name", { value: "GetNodePool" });
    
                    /**
                     * Calls GetNodePool.
                     * @function getNodePool
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.IGetNodePoolRequest} request GetNodePoolRequest message or plain object
                     * @returns {Promise<google.container.v1.NodePool>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.container.v1.ClusterManager|createNodePool}.
                     * @memberof google.container.v1.ClusterManager
                     * @typedef CreateNodePoolCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.container.v1.Operation} [response] Operation
                     */
    
                    /**
                     * Calls CreateNodePool.
                     * @function createNodePool
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ICreateNodePoolRequest} request CreateNodePoolRequest message or plain object
                     * @param {google.container.v1.ClusterManager.CreateNodePoolCallback} callback Node-style callback called with the error, if any, and Operation
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ClusterManager.prototype.createNodePool = function createNodePool(request, callback) {
                        return this.rpcCall(createNodePool, $root.google.container.v1.CreateNodePoolRequest, $root.google.container.v1.Operation, request, callback);
                    }, "name", { value: "CreateNodePool" });
    
                    /**
                     * Calls CreateNodePool.
                     * @function createNodePool
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ICreateNodePoolRequest} request CreateNodePoolRequest message or plain object
                     * @returns {Promise<google.container.v1.Operation>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.container.v1.ClusterManager|deleteNodePool}.
                     * @memberof google.container.v1.ClusterManager
                     * @typedef DeleteNodePoolCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.container.v1.Operation} [response] Operation
                     */
    
                    /**
                     * Calls DeleteNodePool.
                     * @function deleteNodePool
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.IDeleteNodePoolRequest} request DeleteNodePoolRequest message or plain object
                     * @param {google.container.v1.ClusterManager.DeleteNodePoolCallback} callback Node-style callback called with the error, if any, and Operation
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ClusterManager.prototype.deleteNodePool = function deleteNodePool(request, callback) {
                        return this.rpcCall(deleteNodePool, $root.google.container.v1.DeleteNodePoolRequest, $root.google.container.v1.Operation, request, callback);
                    }, "name", { value: "DeleteNodePool" });
    
                    /**
                     * Calls DeleteNodePool.
                     * @function deleteNodePool
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.IDeleteNodePoolRequest} request DeleteNodePoolRequest message or plain object
                     * @returns {Promise<google.container.v1.Operation>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.container.v1.ClusterManager|completeNodePoolUpgrade}.
                     * @memberof google.container.v1.ClusterManager
                     * @typedef CompleteNodePoolUpgradeCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.protobuf.Empty} [response] Empty
                     */
    
                    /**
                     * Calls CompleteNodePoolUpgrade.
                     * @function completeNodePoolUpgrade
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ICompleteNodePoolUpgradeRequest} request CompleteNodePoolUpgradeRequest message or plain object
                     * @param {google.container.v1.ClusterManager.CompleteNodePoolUpgradeCallback} callback Node-style callback called with the error, if any, and Empty
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ClusterManager.prototype.completeNodePoolUpgrade = function completeNodePoolUpgrade(request, callback) {
                        return this.rpcCall(completeNodePoolUpgrade, $root.google.container.v1.CompleteNodePoolUpgradeRequest, $root.google.protobuf.Empty, request, callback);
                    }, "name", { value: "CompleteNodePoolUpgrade" });
    
                    /**
                     * Calls CompleteNodePoolUpgrade.
                     * @function completeNodePoolUpgrade
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ICompleteNodePoolUpgradeRequest} request CompleteNodePoolUpgradeRequest message or plain object
                     * @returns {Promise<google.protobuf.Empty>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.container.v1.ClusterManager|rollbackNodePoolUpgrade}.
                     * @memberof google.container.v1.ClusterManager
                     * @typedef RollbackNodePoolUpgradeCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.container.v1.Operation} [response] Operation
                     */
    
                    /**
                     * Calls RollbackNodePoolUpgrade.
                     * @function rollbackNodePoolUpgrade
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.IRollbackNodePoolUpgradeRequest} request RollbackNodePoolUpgradeRequest message or plain object
                     * @param {google.container.v1.ClusterManager.RollbackNodePoolUpgradeCallback} callback Node-style callback called with the error, if any, and Operation
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ClusterManager.prototype.rollbackNodePoolUpgrade = function rollbackNodePoolUpgrade(request, callback) {
                        return this.rpcCall(rollbackNodePoolUpgrade, $root.google.container.v1.RollbackNodePoolUpgradeRequest, $root.google.container.v1.Operation, request, callback);
                    }, "name", { value: "RollbackNodePoolUpgrade" });
    
                    /**
                     * Calls RollbackNodePoolUpgrade.
                     * @function rollbackNodePoolUpgrade
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.IRollbackNodePoolUpgradeRequest} request RollbackNodePoolUpgradeRequest message or plain object
                     * @returns {Promise<google.container.v1.Operation>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.container.v1.ClusterManager|setNodePoolManagement}.
                     * @memberof google.container.v1.ClusterManager
                     * @typedef SetNodePoolManagementCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.container.v1.Operation} [response] Operation
                     */
    
                    /**
                     * Calls SetNodePoolManagement.
                     * @function setNodePoolManagement
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ISetNodePoolManagementRequest} request SetNodePoolManagementRequest message or plain object
                     * @param {google.container.v1.ClusterManager.SetNodePoolManagementCallback} callback Node-style callback called with the error, if any, and Operation
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ClusterManager.prototype.setNodePoolManagement = function setNodePoolManagement(request, callback) {
                        return this.rpcCall(setNodePoolManagement, $root.google.container.v1.SetNodePoolManagementRequest, $root.google.container.v1.Operation, request, callback);
                    }, "name", { value: "SetNodePoolManagement" });
    
                    /**
                     * Calls SetNodePoolManagement.
                     * @function setNodePoolManagement
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ISetNodePoolManagementRequest} request SetNodePoolManagementRequest message or plain object
                     * @returns {Promise<google.container.v1.Operation>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.container.v1.ClusterManager|setLabels}.
                     * @memberof google.container.v1.ClusterManager
                     * @typedef SetLabelsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.container.v1.Operation} [response] Operation
                     */
    
                    /**
                     * Calls SetLabels.
                     * @function setLabels
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ISetLabelsRequest} request SetLabelsRequest message or plain object
                     * @param {google.container.v1.ClusterManager.SetLabelsCallback} callback Node-style callback called with the error, if any, and Operation
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ClusterManager.prototype.setLabels = function setLabels(request, callback) {
                        return this.rpcCall(setLabels, $root.google.container.v1.SetLabelsRequest, $root.google.container.v1.Operation, request, callback);
                    }, "name", { value: "SetLabels" });
    
                    /**
                     * Calls SetLabels.
                     * @function setLabels
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ISetLabelsRequest} request SetLabelsRequest message or plain object
                     * @returns {Promise<google.container.v1.Operation>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.container.v1.ClusterManager|setLegacyAbac}.
                     * @memberof google.container.v1.ClusterManager
                     * @typedef SetLegacyAbacCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.container.v1.Operation} [response] Operation
                     */
    
                    /**
                     * Calls SetLegacyAbac.
                     * @function setLegacyAbac
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ISetLegacyAbacRequest} request SetLegacyAbacRequest message or plain object
                     * @param {google.container.v1.ClusterManager.SetLegacyAbacCallback} callback Node-style callback called with the error, if any, and Operation
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ClusterManager.prototype.setLegacyAbac = function setLegacyAbac(request, callback) {
                        return this.rpcCall(setLegacyAbac, $root.google.container.v1.SetLegacyAbacRequest, $root.google.container.v1.Operation, request, callback);
                    }, "name", { value: "SetLegacyAbac" });
    
                    /**
                     * Calls SetLegacyAbac.
                     * @function setLegacyAbac
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ISetLegacyAbacRequest} request SetLegacyAbacRequest message or plain object
                     * @returns {Promise<google.container.v1.Operation>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.container.v1.ClusterManager|startIPRotation}.
                     * @memberof google.container.v1.ClusterManager
                     * @typedef StartIPRotationCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.container.v1.Operation} [response] Operation
                     */
    
                    /**
                     * Calls StartIPRotation.
                     * @function startIPRotation
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.IStartIPRotationRequest} request StartIPRotationRequest message or plain object
                     * @param {google.container.v1.ClusterManager.StartIPRotationCallback} callback Node-style callback called with the error, if any, and Operation
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ClusterManager.prototype.startIPRotation = function startIPRotation(request, callback) {
                        return this.rpcCall(startIPRotation, $root.google.container.v1.StartIPRotationRequest, $root.google.container.v1.Operation, request, callback);
                    }, "name", { value: "StartIPRotation" });
    
                    /**
                     * Calls StartIPRotation.
                     * @function startIPRotation
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.IStartIPRotationRequest} request StartIPRotationRequest message or plain object
                     * @returns {Promise<google.container.v1.Operation>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.container.v1.ClusterManager|completeIPRotation}.
                     * @memberof google.container.v1.ClusterManager
                     * @typedef CompleteIPRotationCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.container.v1.Operation} [response] Operation
                     */
    
                    /**
                     * Calls CompleteIPRotation.
                     * @function completeIPRotation
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ICompleteIPRotationRequest} request CompleteIPRotationRequest message or plain object
                     * @param {google.container.v1.ClusterManager.CompleteIPRotationCallback} callback Node-style callback called with the error, if any, and Operation
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ClusterManager.prototype.completeIPRotation = function completeIPRotation(request, callback) {
                        return this.rpcCall(completeIPRotation, $root.google.container.v1.CompleteIPRotationRequest, $root.google.container.v1.Operation, request, callback);
                    }, "name", { value: "CompleteIPRotation" });
    
                    /**
                     * Calls CompleteIPRotation.
                     * @function completeIPRotation
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ICompleteIPRotationRequest} request CompleteIPRotationRequest message or plain object
                     * @returns {Promise<google.container.v1.Operation>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.container.v1.ClusterManager|setNodePoolSize}.
                     * @memberof google.container.v1.ClusterManager
                     * @typedef SetNodePoolSizeCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.container.v1.Operation} [response] Operation
                     */
    
                    /**
                     * Calls SetNodePoolSize.
                     * @function setNodePoolSize
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ISetNodePoolSizeRequest} request SetNodePoolSizeRequest message or plain object
                     * @param {google.container.v1.ClusterManager.SetNodePoolSizeCallback} callback Node-style callback called with the error, if any, and Operation
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ClusterManager.prototype.setNodePoolSize = function setNodePoolSize(request, callback) {
                        return this.rpcCall(setNodePoolSize, $root.google.container.v1.SetNodePoolSizeRequest, $root.google.container.v1.Operation, request, callback);
                    }, "name", { value: "SetNodePoolSize" });
    
                    /**
                     * Calls SetNodePoolSize.
                     * @function setNodePoolSize
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ISetNodePoolSizeRequest} request SetNodePoolSizeRequest message or plain object
                     * @returns {Promise<google.container.v1.Operation>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.container.v1.ClusterManager|setNetworkPolicy}.
                     * @memberof google.container.v1.ClusterManager
                     * @typedef SetNetworkPolicyCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.container.v1.Operation} [response] Operation
                     */
    
                    /**
                     * Calls SetNetworkPolicy.
                     * @function setNetworkPolicy
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ISetNetworkPolicyRequest} request SetNetworkPolicyRequest message or plain object
                     * @param {google.container.v1.ClusterManager.SetNetworkPolicyCallback} callback Node-style callback called with the error, if any, and Operation
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ClusterManager.prototype.setNetworkPolicy = function setNetworkPolicy(request, callback) {
                        return this.rpcCall(setNetworkPolicy, $root.google.container.v1.SetNetworkPolicyRequest, $root.google.container.v1.Operation, request, callback);
                    }, "name", { value: "SetNetworkPolicy" });
    
                    /**
                     * Calls SetNetworkPolicy.
                     * @function setNetworkPolicy
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ISetNetworkPolicyRequest} request SetNetworkPolicyRequest message or plain object
                     * @returns {Promise<google.container.v1.Operation>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.container.v1.ClusterManager|setMaintenancePolicy}.
                     * @memberof google.container.v1.ClusterManager
                     * @typedef SetMaintenancePolicyCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.container.v1.Operation} [response] Operation
                     */
    
                    /**
                     * Calls SetMaintenancePolicy.
                     * @function setMaintenancePolicy
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ISetMaintenancePolicyRequest} request SetMaintenancePolicyRequest message or plain object
                     * @param {google.container.v1.ClusterManager.SetMaintenancePolicyCallback} callback Node-style callback called with the error, if any, and Operation
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ClusterManager.prototype.setMaintenancePolicy = function setMaintenancePolicy(request, callback) {
                        return this.rpcCall(setMaintenancePolicy, $root.google.container.v1.SetMaintenancePolicyRequest, $root.google.container.v1.Operation, request, callback);
                    }, "name", { value: "SetMaintenancePolicy" });
    
                    /**
                     * Calls SetMaintenancePolicy.
                     * @function setMaintenancePolicy
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ISetMaintenancePolicyRequest} request SetMaintenancePolicyRequest message or plain object
                     * @returns {Promise<google.container.v1.Operation>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.container.v1.ClusterManager|listUsableSubnetworks}.
                     * @memberof google.container.v1.ClusterManager
                     * @typedef ListUsableSubnetworksCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.container.v1.ListUsableSubnetworksResponse} [response] ListUsableSubnetworksResponse
                     */
    
                    /**
                     * Calls ListUsableSubnetworks.
                     * @function listUsableSubnetworks
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.IListUsableSubnetworksRequest} request ListUsableSubnetworksRequest message or plain object
                     * @param {google.container.v1.ClusterManager.ListUsableSubnetworksCallback} callback Node-style callback called with the error, if any, and ListUsableSubnetworksResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ClusterManager.prototype.listUsableSubnetworks = function listUsableSubnetworks(request, callback) {
                        return this.rpcCall(listUsableSubnetworks, $root.google.container.v1.ListUsableSubnetworksRequest, $root.google.container.v1.ListUsableSubnetworksResponse, request, callback);
                    }, "name", { value: "ListUsableSubnetworks" });
    
                    /**
                     * Calls ListUsableSubnetworks.
                     * @function listUsableSubnetworks
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.IListUsableSubnetworksRequest} request ListUsableSubnetworksRequest message or plain object
                     * @returns {Promise<google.container.v1.ListUsableSubnetworksResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link google.container.v1.ClusterManager|checkAutopilotCompatibility}.
                     * @memberof google.container.v1.ClusterManager
                     * @typedef CheckAutopilotCompatibilityCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {google.container.v1.CheckAutopilotCompatibilityResponse} [response] CheckAutopilotCompatibilityResponse
                     */
    
                    /**
                     * Calls CheckAutopilotCompatibility.
                     * @function checkAutopilotCompatibility
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ICheckAutopilotCompatibilityRequest} request CheckAutopilotCompatibilityRequest message or plain object
                     * @param {google.container.v1.ClusterManager.CheckAutopilotCompatibilityCallback} callback Node-style callback called with the error, if any, and CheckAutopilotCompatibilityResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(ClusterManager.prototype.checkAutopilotCompatibility = function checkAutopilotCompatibility(request, callback) {
                        return this.rpcCall(checkAutopilotCompatibility, $root.google.container.v1.CheckAutopilotCompatibilityRequest, $root.google.container.v1.CheckAutopilotCompatibilityResponse, request, callback);
                    }, "name", { value: "CheckAutopilotCompatibility" });
    
                    /**
                     * Calls CheckAutopilotCompatibility.
                     * @function checkAutopilotCompatibility
                     * @memberof google.container.v1.ClusterManager
                     * @instance
                     * @param {google.container.v1.ICheckAutopilotCompatibilityRequest} request CheckAutopilotCompatibilityRequest message or plain object
                     * @returns {Promise<google.container.v1.CheckAutopilotCompatibilityResponse>} Promise
                     * @variation 2
                     */
    
                    return ClusterManager;
                })();
    
                v1.LinuxNodeConfig = (function() {
    
                    /**
                     * Properties of a LinuxNodeConfig.
                     * @memberof google.container.v1
                     * @interface ILinuxNodeConfig
                     * @property {Object.<string,string>|null} [sysctls] LinuxNodeConfig sysctls
                     * @property {google.container.v1.LinuxNodeConfig.CgroupMode|null} [cgroupMode] LinuxNodeConfig cgroupMode
                     * @property {google.container.v1.LinuxNodeConfig.IHugepagesConfig|null} [hugepages] LinuxNodeConfig hugepages
                     */
    
                    /**
                     * Constructs a new LinuxNodeConfig.
                     * @memberof google.container.v1
                     * @classdesc Represents a LinuxNodeConfig.
                     * @implements ILinuxNodeConfig
                     * @constructor
                     * @param {google.container.v1.ILinuxNodeConfig=} [properties] Properties to set
                     */
                    function LinuxNodeConfig(properties) {
                        this.sysctls = {};
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * LinuxNodeConfig sysctls.
                     * @member {Object.<string,string>} sysctls
                     * @memberof google.container.v1.LinuxNodeConfig
                     * @instance
                     */
                    LinuxNodeConfig.prototype.sysctls = $util.emptyObject;
    
                    /**
                     * LinuxNodeConfig cgroupMode.
                     * @member {google.container.v1.LinuxNodeConfig.CgroupMode} cgroupMode
                     * @memberof google.container.v1.LinuxNodeConfig
                     * @instance
                     */
                    LinuxNodeConfig.prototype.cgroupMode = 0;
    
                    /**
                     * LinuxNodeConfig hugepages.
                     * @member {google.container.v1.LinuxNodeConfig.IHugepagesConfig|null|undefined} hugepages
                     * @memberof google.container.v1.LinuxNodeConfig
                     * @instance
                     */
                    LinuxNodeConfig.prototype.hugepages = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * LinuxNodeConfig _hugepages.
                     * @member {"hugepages"|undefined} _hugepages
                     * @memberof google.container.v1.LinuxNodeConfig
                     * @instance
                     */
                    Object.defineProperty(LinuxNodeConfig.prototype, "_hugepages", {
                        get: $util.oneOfGetter($oneOfFields = ["hugepages"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new LinuxNodeConfig instance using the specified properties.
                     * @function create
                     * @memberof google.container.v1.LinuxNodeConfig
                     * @static
                     * @param {google.container.v1.ILinuxNodeConfig=} [properties] Properties to set
                     * @returns {google.container.v1.LinuxNodeConfig} LinuxNodeConfig instance
                     */
                    LinuxNodeConfig.create = function create(properties) {
                        return new LinuxNodeConfig(properties);
                    };
    
                    /**
                     * Encodes the specified LinuxNodeConfig message. Does not implicitly {@link google.container.v1.LinuxNodeConfig.verify|verify} messages.
                     * @function encode
                     * @memberof google.container.v1.LinuxNodeConfig
                     * @static
                     * @param {google.container.v1.ILinuxNodeConfig} message LinuxNodeConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LinuxNodeConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.sysctls != null && Object.hasOwnProperty.call(message, "sysctls"))
                            for (var keys = Object.keys(message.sysctls), i = 0; i < keys.length; ++i)
                                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.sysctls[keys[i]]).ldelim();
                        if (message.cgroupMode != null && Object.hasOwnProperty.call(message, "cgroupMode"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.cgroupMode);
                        if (message.hugepages != null && Object.hasOwnProperty.call(message, "hugepages"))
                            $root.google.container.v1.LinuxNodeConfig.HugepagesConfig.encode(message.hugepages, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified LinuxNodeConfig message, length delimited. Does not implicitly {@link google.container.v1.LinuxNodeConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.container.v1.LinuxNodeConfig
                     * @static
                     * @param {google.container.v1.ILinuxNodeConfig} message LinuxNodeConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    LinuxNodeConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a LinuxNodeConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.container.v1.LinuxNodeConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.container.v1.LinuxNodeConfig} LinuxNodeConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LinuxNodeConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.container.v1.LinuxNodeConfig(), key, value;
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    if (message.sysctls === $util.emptyObject)
                                        message.sysctls = {};
                                    var end2 = reader.uint32() + reader.pos;
                                    key = "";
                                    value = "";
                                    while (reader.pos < end2) {
                                        var tag2 = reader.uint32();
                                        switch (tag2 >>> 3) {
                                        case 1:
                                            key = reader.string();
                                            break;
                                        case 2:
                                            value = reader.string();
                                            break;
                                        default:
                                            reader.skipType(tag2 & 7);
                                            break;
                                        }
                                    }
                                    message.sysctls[key] = value;
                                    break;
                                }
                            case 2: {
                                    message.cgroupMode = reader.int32();
                                    break;
                                }
                            case 3: {
                                    message.hugepages = $root.google.container.v1.LinuxNodeConfig.HugepagesConfig.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a LinuxNodeConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.container.v1.LinuxNodeConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.container.v1.LinuxNodeConfig} LinuxNodeConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    LinuxNodeConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a LinuxNodeConfig message.
                     * @function verify
                     * @memberof google.container.v1.LinuxNodeConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    LinuxNodeConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.sysctls != null && message.hasOwnProperty("sysctls")) {
                            if (!$util.isObject(message.sysctls))
                                return "sysctls: object expected";
                            var key = Object.keys(message.sysctls);
                            for (var i = 0; i < key.length; ++i)
                                if (!$util.isString(message.sysctls[key[i]]))
                                    return "sysctls: string{k:string} expected";
                        }
                        if (message.cgroupMode != null && message.hasOwnProperty("cgroupMode"))
                            switch (message.cgroupMode) {
                            default:
                                return "cgroupMode: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.hugepages != null && message.hasOwnProperty("hugepages")) {
                            properties._hugepages = 1;
                            {
                                var error = $root.google.container.v1.LinuxNodeConfig.HugepagesConfig.verify(message.hugepages);
                                if (error)
                                    return "hugepages." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a LinuxNodeConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.container.v1.LinuxNodeConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.container.v1.LinuxNodeConfig} LinuxNodeConfig
                     */
                    LinuxNodeConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.container.v1.LinuxNodeConfig)
                            return object;
                        var message = new $root.google.container.v1.LinuxNodeConfig();
                        if (object.sysctls) {
                            if (typeof object.sysctls !== "object")
                                throw TypeError(".google.container.v1.LinuxNodeConfig.sysctls: object expected");
                            message.sysctls = {};
                            for (var keys = Object.keys(object.sysctls), i = 0; i < keys.length; ++i)
                                message.sysctls[keys[i]] = String(object.sysctls[keys[i]]);
                        }
                        switch (object.cgroupMode) {
                        default:
                            if (typeof object.cgroupMode === "number") {
                                message.cgroupMode = object.cgroupMode;
                                break;
                            }
                            break;
                        case "CGROUP_MODE_UNSPECIFIED":
                        case 0:
                            message.cgroupMode = 0;
                            break;
                        case "CGROUP_MODE_V1":
                        case 1:
                            message.cgroupMode = 1;
                            break;
                        case "CGROUP_MODE_V2":
                        case 2:
                            message.cgroupMode = 2;
                            break;
                        }
                        if (object.hugepages != null) {
                            if (typeof object.hugepages !== "object")
                                throw TypeError(".google.container.v1.LinuxNodeConfig.hugepages: object expected");
                            message.hugepages = $root.google.container.v1.LinuxNodeConfig.HugepagesConfig.fromObject(object.hugepages);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a LinuxNodeConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.container.v1.LinuxNodeConfig
                     * @static
                     * @param {google.container.v1.LinuxNodeConfig} message LinuxNodeConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    LinuxNodeConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.objects || options.defaults)
                            object.sysctls = {};
                        if (options.defaults)
                            object.cgroupMode = options.enums === String ? "CGROUP_MODE_UNSPECIFIED" : 0;
                        var keys2;
                        if (message.sysctls && (keys2 = Object.keys(message.sysctls)).length) {
                            object.sysctls = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.sysctls[keys2[j]] = message.sysctls[keys2[j]];
                        }
                        if (message.cgroupMode != null && message.hasOwnProperty("cgroupMode"))
                            object.cgroupMode = options.enums === String ? $root.google.container.v1.LinuxNodeConfig.CgroupMode[message.cgroupMode] === undefined ? message.cgroupMode : $root.google.container.v1.LinuxNodeConfig.CgroupMode[message.cgroupMode] : message.cgroupMode;
                        if (message.hugepages != null && message.hasOwnProperty("hugepages")) {
                            object.hugepages = $root.google.container.v1.LinuxNodeConfig.HugepagesConfig.toObject(message.hugepages, options);
                            if (options.oneofs)
                                object._hugepages = "hugepages";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this LinuxNodeConfig to JSON.
                     * @function toJSON
                     * @memberof google.container.v1.LinuxNodeConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    LinuxNodeConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for LinuxNodeConfig
                     * @function getTypeUrl
                     * @memberof google.container.v1.LinuxNodeConfig
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    LinuxNodeConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.container.v1.LinuxNodeConfig";
                    };
    
                    /**
                     * CgroupMode enum.
                     * @name google.container.v1.LinuxNodeConfig.CgroupMode
                     * @enum {number}
                     * @property {number} CGROUP_MODE_UNSPECIFIED=0 CGROUP_MODE_UNSPECIFIED value
                     * @property {number} CGROUP_MODE_V1=1 CGROUP_MODE_V1 value
                     * @property {number} CGROUP_MODE_V2=2 CGROUP_MODE_V2 value
                     */
                    LinuxNodeConfig.CgroupMode = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "CGROUP_MODE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "CGROUP_MODE_V1"] = 1;
                        values[valuesById[2] = "CGROUP_MODE_V2"] = 2;
                        return values;
                    })();
    
                    LinuxNodeConfig.HugepagesConfig = (function() {
    
                        /**
                         * Properties of a HugepagesConfig.
                         * @memberof google.container.v1.LinuxNodeConfig
                         * @interface IHugepagesConfig
                         * @property {number|null} [hugepageSize2m] HugepagesConfig hugepageSize2m
                         * @property {number|null} [hugepageSize1g] HugepagesConfig hugepageSize1g
                         */
    
                        /**
                         * Constructs a new HugepagesConfig.
                         * @memberof google.container.v1.LinuxNodeConfig
                         * @classdesc Represents a HugepagesConfig.
                         * @implements IHugepagesConfig
                         * @constructor
                         * @param {google.container.v1.LinuxNodeConfig.IHugepagesConfig=} [properties] Properties to set
                         */
                        function HugepagesConfig(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * HugepagesConfig hugepageSize2m.
                         * @member {number|null|undefined} hugepageSize2m
                         * @memberof google.container.v1.LinuxNodeConfig.HugepagesConfig
                         * @instance
                         */
                        HugepagesConfig.prototype.hugepageSize2m = null;
    
                        /**
                         * HugepagesConfig hugepageSize1g.
                         * @member {number|null|undefined} hugepageSize1g
                         * @memberof google.container.v1.LinuxNodeConfig.HugepagesConfig
                         * @instance
                         */
                        HugepagesConfig.prototype.hugepageSize1g = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * HugepagesConfig _hugepageSize2m.
                         * @member {"hugepageSize2m"|undefined} _hugepageSize2m
                         * @memberof google.container.v1.LinuxNodeConfig.HugepagesConfig
                         * @instance
                         */
                        Object.defineProperty(HugepagesConfig.prototype, "_hugepageSize2m", {
                            get: $util.oneOfGetter($oneOfFields = ["hugepageSize2m"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * HugepagesConfig _hugepageSize1g.
                         * @member {"hugepageSize1g"|undefined} _hugepageSize1g
                         * @memberof google.container.v1.LinuxNodeConfig.HugepagesConfig
                         * @instance
                         */
                        Object.defineProperty(HugepagesConfig.prototype, "_hugepageSize1g", {
                            get: $util.oneOfGetter($oneOfFields = ["hugepageSize1g"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Creates a new HugepagesConfig instance using the specified properties.
                         * @function create
                         * @memberof google.container.v1.LinuxNodeConfig.HugepagesConfig
                         * @static
                         * @param {google.container.v1.LinuxNodeConfig.IHugepagesConfig=} [properties] Properties to set
                         * @returns {google.container.v1.LinuxNodeConfig.HugepagesConfig} HugepagesConfig instance
                         */
                        HugepagesConfig.create = function create(properties) {
                            return new HugepagesConfig(properties);
                        };
    
                        /**
                         * Encodes the specified HugepagesConfig message. Does not implicitly {@link google.container.v1.LinuxNodeConfig.HugepagesConfig.verify|verify} messages.
                         * @function encode
                         * @memberof google.container.v1.LinuxNodeConfig.HugepagesConfig
                         * @static
                         * @param {google.container.v1.LinuxNodeConfig.IHugepagesConfig} message HugepagesConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        HugepagesConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.hugepageSize2m != null && Object.hasOwnProperty.call(message, "hugepageSize2m"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.hugepageSize2m);
                            if (message.hugepageSize1g != null && Object.hasOwnProperty.call(message, "hugepageSize1g"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.hugepageSize1g);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified HugepagesConfig message, length delimited. Does not implicitly {@link google.container.v1.LinuxNodeConfig.HugepagesConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof google.container.v1.LinuxNodeConfig.HugepagesConfig
                         * @static
                         * @param {google.container.v1.LinuxNodeConfig.IHugepagesConfig} message HugepagesConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        HugepagesConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a HugepagesConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof google.container.v1.LinuxNodeConfig.HugepagesConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {google.container.v1.LinuxNodeConfig.HugepagesConfig} HugepagesConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        HugepagesConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.container.v1.LinuxNodeConfig.HugepagesConfig();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.hugepageSize2m = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        message.hugepageSize1g = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a HugepagesConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof google.container.v1.LinuxNodeConfig.HugepagesConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {google.container.v1.LinuxNodeConfig.HugepagesConfig} HugepagesConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        HugepagesConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a HugepagesConfig message.
                         * @function verify
                         * @memberof google.container.v1.LinuxNodeConfig.HugepagesConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        HugepagesConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.hugepageSize2m != null && message.hasOwnProperty("hugepageSize2m")) {
                                properties._hugepageSize2m = 1;
                                if (!$util.isInteger(message.hugepageSize2m))
                                    return "hugepageSize2m: integer expected";
                            }
                            if (message.hugepageSize1g != null && message.hasOwnProperty("hugepageSize1g")) {
                                properties._hugepageSize1g = 1;
                                if (!$util.isInteger(message.hugepageSize1g))
                                    return "hugepageSize1g: integer expected";
                            }
                            return null;
                        };
    
                        /**
                         * Creates a HugepagesConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof google.container.v1.LinuxNodeConfig.HugepagesConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {google.container.v1.LinuxNodeConfig.HugepagesConfig} HugepagesConfig
                         */
                        HugepagesConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.google.container.v1.LinuxNodeConfig.HugepagesConfig)
                                return object;
                            var message = new $root.google.container.v1.LinuxNodeConfig.HugepagesConfig();
                            if (object.hugepageSize2m != null)
                                message.hugepageSize2m = object.hugepageSize2m | 0;
                            if (object.hugepageSize1g != null)
                                message.hugepageSize1g = object.hugepageSize1g | 0;
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a HugepagesConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof google.container.v1.LinuxNodeConfig.HugepagesConfig
                         * @static
                         * @param {google.container.v1.LinuxNodeConfig.HugepagesConfig} message HugepagesConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        HugepagesConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (message.hugepageSize2m != null && message.hasOwnProperty("hugepageSize2m")) {
                                object.hugepageSize2m = message.hugepageSize2m;
                                if (options.oneofs)
                                    object._hugepageSize2m = "hugepageSize2m";
                            }
                            if (message.hugepageSize1g != null && message.hasOwnProperty("hugepageSize1g")) {
                                object.hugepageSize1g = message.hugepageSize1g;
                                if (options.oneofs)
                                    object._hugepageSize1g = "hugepageSize1g";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this HugepagesConfig to JSON.
                         * @function toJSON
                         * @memberof google.container.v1.LinuxNodeConfig.HugepagesConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        HugepagesConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        /**
                         * Gets the default type url for HugepagesConfig
                         * @function getTypeUrl
                         * @memberof google.container.v1.LinuxNodeConfig.HugepagesConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        HugepagesConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/google.container.v1.LinuxNodeConfig.HugepagesConfig";
                        };
    
                        return HugepagesConfig;
                    })();
    
                    return LinuxNodeConfig;
                })();
    
                v1.WindowsNodeConfig = (function() {
    
                    /**
                     * Properties of a WindowsNodeConfig.
                     * @memberof google.container.v1
                     * @interface IWindowsNodeConfig
                     * @property {google.container.v1.WindowsNodeConfig.OSVersion|null} [osVersion] WindowsNodeConfig osVersion
                     */
    
                    /**
                     * Constructs a new WindowsNodeConfig.
                     * @memberof google.container.v1
                     * @classdesc Represents a WindowsNodeConfig.
                     * @implements IWindowsNodeConfig
                     * @constructor
                     * @param {google.container.v1.IWindowsNodeConfig=} [properties] Properties to set
                     */
                    function WindowsNodeConfig(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * WindowsNodeConfig osVersion.
                     * @member {google.container.v1.WindowsNodeConfig.OSVersion} osVersion
                     * @memberof google.container.v1.WindowsNodeConfig
                     * @instance
                     */
                    WindowsNodeConfig.prototype.osVersion = 0;
    
                    /**
                     * Creates a new WindowsNodeConfig instance using the specified properties.
                     * @function create
                     * @memberof google.container.v1.WindowsNodeConfig
                     * @static
                     * @param {google.container.v1.IWindowsNodeConfig=} [properties] Properties to set
                     * @returns {google.container.v1.WindowsNodeConfig} WindowsNodeConfig instance
                     */
                    WindowsNodeConfig.create = function create(properties) {
                        return new WindowsNodeConfig(properties);
                    };
    
                    /**
                     * Encodes the specified WindowsNodeConfig message. Does not implicitly {@link google.container.v1.WindowsNodeConfig.verify|verify} messages.
                     * @function encode
                     * @memberof google.container.v1.WindowsNodeConfig
                     * @static
                     * @param {google.container.v1.IWindowsNodeConfig} message WindowsNodeConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    WindowsNodeConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.osVersion != null && Object.hasOwnProperty.call(message, "osVersion"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.osVersion);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified WindowsNodeConfig message, length delimited. Does not implicitly {@link google.container.v1.WindowsNodeConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.container.v1.WindowsNodeConfig
                     * @static
                     * @param {google.container.v1.IWindowsNodeConfig} message WindowsNodeConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    WindowsNodeConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a WindowsNodeConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.container.v1.WindowsNodeConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.container.v1.WindowsNodeConfig} WindowsNodeConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    WindowsNodeConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.container.v1.WindowsNodeConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.osVersion = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a WindowsNodeConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.container.v1.WindowsNodeConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.container.v1.WindowsNodeConfig} WindowsNodeConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    WindowsNodeConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a WindowsNodeConfig message.
                     * @function verify
                     * @memberof google.container.v1.WindowsNodeConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    WindowsNodeConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.osVersion != null && message.hasOwnProperty("osVersion"))
                            switch (message.osVersion) {
                            default:
                                return "osVersion: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates a WindowsNodeConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.container.v1.WindowsNodeConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.container.v1.WindowsNodeConfig} WindowsNodeConfig
                     */
                    WindowsNodeConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.container.v1.WindowsNodeConfig)
                            return object;
                        var message = new $root.google.container.v1.WindowsNodeConfig();
                        switch (object.osVersion) {
                        default:
                            if (typeof object.osVersion === "number") {
                                message.osVersion = object.osVersion;
                                break;
                            }
                            break;
                        case "OS_VERSION_UNSPECIFIED":
                        case 0:
                            message.osVersion = 0;
                            break;
                        case "OS_VERSION_LTSC2019":
                        case 1:
                            message.osVersion = 1;
                            break;
                        case "OS_VERSION_LTSC2022":
                        case 2:
                            message.osVersion = 2;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a WindowsNodeConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.container.v1.WindowsNodeConfig
                     * @static
                     * @param {google.container.v1.WindowsNodeConfig} message WindowsNodeConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    WindowsNodeConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.osVersion = options.enums === String ? "OS_VERSION_UNSPECIFIED" : 0;
                        if (message.osVersion != null && message.hasOwnProperty("osVersion"))
                            object.osVersion = options.enums === String ? $root.google.container.v1.WindowsNodeConfig.OSVersion[message.osVersion] === undefined ? message.osVersion : $root.google.container.v1.WindowsNodeConfig.OSVersion[message.osVersion] : message.osVersion;
                        return object;
                    };
    
                    /**
                     * Converts this WindowsNodeConfig to JSON.
                     * @function toJSON
                     * @memberof google.container.v1.WindowsNodeConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    WindowsNodeConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for WindowsNodeConfig
                     * @function getTypeUrl
                     * @memberof google.container.v1.WindowsNodeConfig
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    WindowsNodeConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.container.v1.WindowsNodeConfig";
                    };
    
                    /**
                     * OSVersion enum.
                     * @name google.container.v1.WindowsNodeConfig.OSVersion
                     * @enum {number}
                     * @property {number} OS_VERSION_UNSPECIFIED=0 OS_VERSION_UNSPECIFIED value
                     * @property {number} OS_VERSION_LTSC2019=1 OS_VERSION_LTSC2019 value
                     * @property {number} OS_VERSION_LTSC2022=2 OS_VERSION_LTSC2022 value
                     */
                    WindowsNodeConfig.OSVersion = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "OS_VERSION_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "OS_VERSION_LTSC2019"] = 1;
                        values[valuesById[2] = "OS_VERSION_LTSC2022"] = 2;
                        return values;
                    })();
    
                    return WindowsNodeConfig;
                })();
    
                v1.NodeKubeletConfig = (function() {
    
                    /**
                     * Properties of a NodeKubeletConfig.
                     * @memberof google.container.v1
                     * @interface INodeKubeletConfig
                     * @property {string|null} [cpuManagerPolicy] NodeKubeletConfig cpuManagerPolicy
                     * @property {google.protobuf.IBoolValue|null} [cpuCfsQuota] NodeKubeletConfig cpuCfsQuota
                     * @property {string|null} [cpuCfsQuotaPeriod] NodeKubeletConfig cpuCfsQuotaPeriod
                     * @property {number|Long|null} [podPidsLimit] NodeKubeletConfig podPidsLimit
                     * @property {boolean|null} [insecureKubeletReadonlyPortEnabled] NodeKubeletConfig insecureKubeletReadonlyPortEnabled
                     */
    
                    /**
                     * Constructs a new NodeKubeletConfig.
                     * @memberof google.container.v1
                     * @classdesc Represents a NodeKubeletConfig.
                     * @implements INodeKubeletConfig
                     * @constructor
                     * @param {google.container.v1.INodeKubeletConfig=} [properties] Properties to set
                     */
                    function NodeKubeletConfig(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NodeKubeletConfig cpuManagerPolicy.
                     * @member {string} cpuManagerPolicy
                     * @memberof google.container.v1.NodeKubeletConfig
                     * @instance
                     */
                    NodeKubeletConfig.prototype.cpuManagerPolicy = "";
    
                    /**
                     * NodeKubeletConfig cpuCfsQuota.
                     * @member {google.protobuf.IBoolValue|null|undefined} cpuCfsQuota
                     * @memberof google.container.v1.NodeKubeletConfig
                     * @instance
                     */
                    NodeKubeletConfig.prototype.cpuCfsQuota = null;
    
                    /**
                     * NodeKubeletConfig cpuCfsQuotaPeriod.
                     * @member {string} cpuCfsQuotaPeriod
                     * @memberof google.container.v1.NodeKubeletConfig
                     * @instance
                     */
                    NodeKubeletConfig.prototype.cpuCfsQuotaPeriod = "";
    
                    /**
                     * NodeKubeletConfig podPidsLimit.
                     * @member {number|Long} podPidsLimit
                     * @memberof google.container.v1.NodeKubeletConfig
                     * @instance
                     */
                    NodeKubeletConfig.prototype.podPidsLimit = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    /**
                     * NodeKubeletConfig insecureKubeletReadonlyPortEnabled.
                     * @member {boolean|null|undefined} insecureKubeletReadonlyPortEnabled
                     * @memberof google.container.v1.NodeKubeletConfig
                     * @instance
                     */
                    NodeKubeletConfig.prototype.insecureKubeletReadonlyPortEnabled = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * NodeKubeletConfig _insecureKubeletReadonlyPortEnabled.
                     * @member {"insecureKubeletReadonlyPortEnabled"|undefined} _insecureKubeletReadonlyPortEnabled
                     * @memberof google.container.v1.NodeKubeletConfig
                     * @instance
                     */
                    Object.defineProperty(NodeKubeletConfig.prototype, "_insecureKubeletReadonlyPortEnabled", {
                        get: $util.oneOfGetter($oneOfFields = ["insecureKubeletReadonlyPortEnabled"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new NodeKubeletConfig instance using the specified properties.
                     * @function create
                     * @memberof google.container.v1.NodeKubeletConfig
                     * @static
                     * @param {google.container.v1.INodeKubeletConfig=} [properties] Properties to set
                     * @returns {google.container.v1.NodeKubeletConfig} NodeKubeletConfig instance
                     */
                    NodeKubeletConfig.create = function create(properties) {
                        return new NodeKubeletConfig(properties);
                    };
    
                    /**
                     * Encodes the specified NodeKubeletConfig message. Does not implicitly {@link google.container.v1.NodeKubeletConfig.verify|verify} messages.
                     * @function encode
                     * @memberof google.container.v1.NodeKubeletConfig
                     * @static
                     * @param {google.container.v1.INodeKubeletConfig} message NodeKubeletConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NodeKubeletConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.cpuManagerPolicy != null && Object.hasOwnProperty.call(message, "cpuManagerPolicy"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.cpuManagerPolicy);
                        if (message.cpuCfsQuota != null && Object.hasOwnProperty.call(message, "cpuCfsQuota"))
                            $root.google.protobuf.BoolValue.encode(message.cpuCfsQuota, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.cpuCfsQuotaPeriod != null && Object.hasOwnProperty.call(message, "cpuCfsQuotaPeriod"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.cpuCfsQuotaPeriod);
                        if (message.podPidsLimit != null && Object.hasOwnProperty.call(message, "podPidsLimit"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int64(message.podPidsLimit);
                        if (message.insecureKubeletReadonlyPortEnabled != null && Object.hasOwnProperty.call(message, "insecureKubeletReadonlyPortEnabled"))
                            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.insecureKubeletReadonlyPortEnabled);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NodeKubeletConfig message, length delimited. Does not implicitly {@link google.container.v1.NodeKubeletConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.container.v1.NodeKubeletConfig
                     * @static
                     * @param {google.container.v1.INodeKubeletConfig} message NodeKubeletConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NodeKubeletConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NodeKubeletConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.container.v1.NodeKubeletConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.container.v1.NodeKubeletConfig} NodeKubeletConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NodeKubeletConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.container.v1.NodeKubeletConfig();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.cpuManagerPolicy = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.cpuCfsQuota = $root.google.protobuf.BoolValue.decode(reader, reader.uint32());
                                    break;
                                }
                            case 3: {
                                    message.cpuCfsQuotaPeriod = reader.string();
                                    break;
                                }
                            case 4: {
                                    message.podPidsLimit = reader.int64();
                                    break;
                                }
                            case 7: {
                                    message.insecureKubeletReadonlyPortEnabled = reader.bool();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a NodeKubeletConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.container.v1.NodeKubeletConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.container.v1.NodeKubeletConfig} NodeKubeletConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NodeKubeletConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NodeKubeletConfig message.
                     * @function verify
                     * @memberof google.container.v1.NodeKubeletConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NodeKubeletConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.cpuManagerPolicy != null && message.hasOwnProperty("cpuManagerPolicy"))
                            if (!$util.isString(message.cpuManagerPolicy))
                                return "cpuManagerPolicy: string expected";
                        if (message.cpuCfsQuota != null && message.hasOwnProperty("cpuCfsQuota")) {
                            var error = $root.google.protobuf.BoolValue.verify(message.cpuCfsQuota);
                            if (error)
                                return "cpuCfsQuota." + error;
                        }
                        if (message.cpuCfsQuotaPeriod != null && message.hasOwnProperty("cpuCfsQuotaPeriod"))
                            if (!$util.isString(message.cpuCfsQuotaPeriod))
                                return "cpuCfsQuotaPeriod: string expected";
                        if (message.podPidsLimit != null && message.hasOwnProperty("podPidsLimit"))
                            if (!$util.isInteger(message.podPidsLimit) && !(message.podPidsLimit && $util.isInteger(message.podPidsLimit.low) && $util.isInteger(message.podPidsLimit.high)))
                                return "podPidsLimit: integer|Long expected";
                        if (message.insecureKubeletReadonlyPortEnabled != null && message.hasOwnProperty("insecureKubeletReadonlyPortEnabled")) {
                            properties._insecureKubeletReadonlyPortEnabled = 1;
                            if (typeof message.insecureKubeletReadonlyPortEnabled !== "boolean")
                                return "insecureKubeletReadonlyPortEnabled: boolean expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a NodeKubeletConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.container.v1.NodeKubeletConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.container.v1.NodeKubeletConfig} NodeKubeletConfig
                     */
                    NodeKubeletConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.container.v1.NodeKubeletConfig)
                            return object;
                        var message = new $root.google.container.v1.NodeKubeletConfig();
                        if (object.cpuManagerPolicy != null)
                            message.cpuManagerPolicy = String(object.cpuManagerPolicy);
                        if (object.cpuCfsQuota != null) {
                            if (typeof object.cpuCfsQuota !== "object")
                                throw TypeError(".google.container.v1.NodeKubeletConfig.cpuCfsQuota: object expected");
                            message.cpuCfsQuota = $root.google.protobuf.BoolValue.fromObject(object.cpuCfsQuota);
                        }
                        if (object.cpuCfsQuotaPeriod != null)
                            message.cpuCfsQuotaPeriod = String(object.cpuCfsQuotaPeriod);
                        if (object.podPidsLimit != null)
                            if ($util.Long)
                                (message.podPidsLimit = $util.Long.fromValue(object.podPidsLimit)).unsigned = false;
                            else if (typeof object.podPidsLimit === "string")
                                message.podPidsLimit = parseInt(object.podPidsLimit, 10);
                            else if (typeof object.podPidsLimit === "number")
                                message.podPidsLimit = object.podPidsLimit;
                            else if (typeof object.podPidsLimit === "object")
                                message.podPidsLimit = new $util.LongBits(object.podPidsLimit.low >>> 0, object.podPidsLimit.high >>> 0).toNumber();
                        if (object.insecureKubeletReadonlyPortEnabled != null)
                            message.insecureKubeletReadonlyPortEnabled = Boolean(object.insecureKubeletReadonlyPortEnabled);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NodeKubeletConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.container.v1.NodeKubeletConfig
                     * @static
                     * @param {google.container.v1.NodeKubeletConfig} message NodeKubeletConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NodeKubeletConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.cpuManagerPolicy = "";
                            object.cpuCfsQuota = null;
                            object.cpuCfsQuotaPeriod = "";
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.podPidsLimit = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.podPidsLimit = options.longs === String ? "0" : 0;
                        }
                        if (message.cpuManagerPolicy != null && message.hasOwnProperty("cpuManagerPolicy"))
                            object.cpuManagerPolicy = message.cpuManagerPolicy;
                        if (message.cpuCfsQuota != null && message.hasOwnProperty("cpuCfsQuota"))
                            object.cpuCfsQuota = $root.google.protobuf.BoolValue.toObject(message.cpuCfsQuota, options);
                        if (message.cpuCfsQuotaPeriod != null && message.hasOwnProperty("cpuCfsQuotaPeriod"))
                            object.cpuCfsQuotaPeriod = message.cpuCfsQuotaPeriod;
                        if (message.podPidsLimit != null && message.hasOwnProperty("podPidsLimit"))
                            if (typeof message.podPidsLimit === "number")
                                object.podPidsLimit = options.longs === String ? String(message.podPidsLimit) : message.podPidsLimit;
                            else
                                object.podPidsLimit = options.longs === String ? $util.Long.prototype.toString.call(message.podPidsLimit) : options.longs === Number ? new $util.LongBits(message.podPidsLimit.low >>> 0, message.podPidsLimit.high >>> 0).toNumber() : message.podPidsLimit;
                        if (message.insecureKubeletReadonlyPortEnabled != null && message.hasOwnProperty("insecureKubeletReadonlyPortEnabled")) {
                            object.insecureKubeletReadonlyPortEnabled = message.insecureKubeletReadonlyPortEnabled;
                            if (options.oneofs)
                                object._insecureKubeletReadonlyPortEnabled = "insecureKubeletReadonlyPortEnabled";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this NodeKubeletConfig to JSON.
                     * @function toJSON
                     * @memberof google.container.v1.NodeKubeletConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NodeKubeletConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for NodeKubeletConfig
                     * @function getTypeUrl
                     * @memberof google.container.v1.NodeKubeletConfig
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    NodeKubeletConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.container.v1.NodeKubeletConfig";
                    };
    
                    return NodeKubeletConfig;
                })();
    
                v1.NodeConfig = (function() {
    
                    /**
                     * Properties of a NodeConfig.
                     * @memberof google.container.v1
                     * @interface INodeConfig
                     * @property {string|null} [machineType] NodeConfig machineType
                     * @property {number|null} [diskSizeGb] NodeConfig diskSizeGb
                     * @property {Array.<string>|null} [oauthScopes] NodeConfig oauthScopes
                     * @property {string|null} [serviceAccount] NodeConfig serviceAccount
                     * @property {Object.<string,string>|null} [metadata] NodeConfig metadata
                     * @property {string|null} [imageType] NodeConfig imageType
                     * @property {Object.<string,string>|null} [labels] NodeConfig labels
                     * @property {number|null} [localSsdCount] NodeConfig localSsdCount
                     * @property {Array.<string>|null} [tags] NodeConfig tags
                     * @property {boolean|null} [preemptible] NodeConfig preemptible
                     * @property {Array.<google.container.v1.IAcceleratorConfig>|null} [accelerators] NodeConfig accelerators
                     * @property {string|null} [diskType] NodeConfig diskType
                     * @property {string|null} [minCpuPlatform] NodeConfig minCpuPlatform
                     * @property {google.container.v1.IWorkloadMetadataConfig|null} [workloadMetadataConfig] NodeConfig workloadMetadataConfig
                     * @property {Array.<google.container.v1.INodeTaint>|null} [taints] NodeConfig taints
                     * @property {google.container.v1.ISandboxConfig|null} [sandboxConfig] NodeConfig sandboxConfig
                     * @property {string|null} [nodeGroup] NodeConfig nodeGroup
                     * @property {google.container.v1.IReservationAffinity|null} [reservationAffinity] NodeConfig reservationAffinity
                     * @property {google.container.v1.IShieldedInstanceConfig|null} [shieldedInstanceConfig] NodeConfig shieldedInstanceConfig
                     * @property {google.container.v1.ILinuxNodeConfig|null} [linuxNodeConfig] NodeConfig linuxNodeConfig
                     * @property {google.container.v1.INodeKubeletConfig|null} [kubeletConfig] NodeConfig kubeletConfig
                     * @property {string|null} [bootDiskKmsKey] NodeConfig bootDiskKmsKey
                     * @property {google.container.v1.IGcfsConfig|null} [gcfsConfig] NodeConfig gcfsConfig
                     * @property {google.container.v1.IAdvancedMachineFeatures|null} [advancedMachineFeatures] NodeConfig advancedMachineFeatures
                     * @property {google.container.v1.IVirtualNIC|null} [gvnic] NodeConfig gvnic
                     * @property {boolean|null} [spot] NodeConfig spot
                     * @property {google.container.v1.IConfidentialNodes|null} [confidentialNodes] NodeConfig confidentialNodes
                     * @property {google.container.v1.IFastSocket|null} [fastSocket] NodeConfig fastSocket
                     * @property {Object.<string,string>|null} [resourceLabels] NodeConfig resourceLabels
                     * @property {google.container.v1.INodePoolLoggingConfig|null} [loggingConfig] NodeConfig loggingConfig
                     * @property {google.container.v1.IWindowsNodeConfig|null} [windowsNodeConfig] NodeConfig windowsNodeConfig
                     * @property {google.container.v1.ILocalNvmeSsdBlockConfig|null} [localNvmeSsdBlockConfig] NodeConfig localNvmeSsdBlockConfig
                     * @property {google.container.v1.IEphemeralStorageLocalSsdConfig|null} [ephemeralStorageLocalSsdConfig] NodeConfig ephemeralStorageLocalSsdConfig
                     * @property {google.container.v1.ISoleTenantConfig|null} [soleTenantConfig] NodeConfig soleTenantConfig
                     * @property {google.container.v1.IContainerdConfig|null} [containerdConfig] NodeConfig containerdConfig
                     * @property {google.container.v1.IResourceManagerTags|null} [resourceManagerTags] NodeConfig resourceManagerTags
                     * @property {boolean|null} [enableConfidentialStorage] NodeConfig enableConfidentialStorage
                     * @property {Array.<google.container.v1.ISecondaryBootDisk>|null} [secondaryBootDisks] NodeConfig secondaryBootDisks
                     * @property {Array.<string>|null} [storagePools] NodeConfig storagePools
                     * @property {google.container.v1.ISecondaryBootDiskUpdateStrategy|null} [secondaryBootDiskUpdateStrategy] NodeConfig secondaryBootDiskUpdateStrategy
                     * @property {google.container.v1.NodeConfig.LocalSsdEncryptionMode|null} [localSsdEncryptionMode] NodeConfig localSsdEncryptionMode
                     * @property {google.container.v1.NodeConfig.EffectiveCgroupMode|null} [effectiveCgroupMode] NodeConfig effectiveCgroupMode
                     */
    
                    /**
                     * Constructs a new NodeConfig.
                     * @memberof google.container.v1
                     * @classdesc Represents a NodeConfig.
                     * @implements INodeConfig
                     * @constructor
                     * @param {google.container.v1.INodeConfig=} [properties] Properties to set
                     */
                    function NodeConfig(properties) {
                        this.oauthScopes = [];
                        this.metadata = {};
                        this.labels = {};
                        this.tags = [];
                        this.accelerators = [];
                        this.taints = [];
                        this.resourceLabels = {};
                        this.secondaryBootDisks = [];
                        this.storagePools = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NodeConfig machineType.
                     * @member {string} machineType
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.machineType = "";
    
                    /**
                     * NodeConfig diskSizeGb.
                     * @member {number} diskSizeGb
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.diskSizeGb = 0;
    
                    /**
                     * NodeConfig oauthScopes.
                     * @member {Array.<string>} oauthScopes
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.oauthScopes = $util.emptyArray;
    
                    /**
                     * NodeConfig serviceAccount.
                     * @member {string} serviceAccount
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.serviceAccount = "";
    
                    /**
                     * NodeConfig metadata.
                     * @member {Object.<string,string>} metadata
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.metadata = $util.emptyObject;
    
                    /**
                     * NodeConfig imageType.
                     * @member {string} imageType
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.imageType = "";
    
                    /**
                     * NodeConfig labels.
                     * @member {Object.<string,string>} labels
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.labels = $util.emptyObject;
    
                    /**
                     * NodeConfig localSsdCount.
                     * @member {number} localSsdCount
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.localSsdCount = 0;
    
                    /**
                     * NodeConfig tags.
                     * @member {Array.<string>} tags
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.tags = $util.emptyArray;
    
                    /**
                     * NodeConfig preemptible.
                     * @member {boolean} preemptible
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.preemptible = false;
    
                    /**
                     * NodeConfig accelerators.
                     * @member {Array.<google.container.v1.IAcceleratorConfig>} accelerators
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.accelerators = $util.emptyArray;
    
                    /**
                     * NodeConfig diskType.
                     * @member {string} diskType
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.diskType = "";
    
                    /**
                     * NodeConfig minCpuPlatform.
                     * @member {string} minCpuPlatform
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.minCpuPlatform = "";
    
                    /**
                     * NodeConfig workloadMetadataConfig.
                     * @member {google.container.v1.IWorkloadMetadataConfig|null|undefined} workloadMetadataConfig
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.workloadMetadataConfig = null;
    
                    /**
                     * NodeConfig taints.
                     * @member {Array.<google.container.v1.INodeTaint>} taints
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.taints = $util.emptyArray;
    
                    /**
                     * NodeConfig sandboxConfig.
                     * @member {google.container.v1.ISandboxConfig|null|undefined} sandboxConfig
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.sandboxConfig = null;
    
                    /**
                     * NodeConfig nodeGroup.
                     * @member {string} nodeGroup
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.nodeGroup = "";
    
                    /**
                     * NodeConfig reservationAffinity.
                     * @member {google.container.v1.IReservationAffinity|null|undefined} reservationAffinity
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.reservationAffinity = null;
    
                    /**
                     * NodeConfig shieldedInstanceConfig.
                     * @member {google.container.v1.IShieldedInstanceConfig|null|undefined} shieldedInstanceConfig
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.shieldedInstanceConfig = null;
    
                    /**
                     * NodeConfig linuxNodeConfig.
                     * @member {google.container.v1.ILinuxNodeConfig|null|undefined} linuxNodeConfig
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.linuxNodeConfig = null;
    
                    /**
                     * NodeConfig kubeletConfig.
                     * @member {google.container.v1.INodeKubeletConfig|null|undefined} kubeletConfig
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.kubeletConfig = null;
    
                    /**
                     * NodeConfig bootDiskKmsKey.
                     * @member {string} bootDiskKmsKey
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.bootDiskKmsKey = "";
    
                    /**
                     * NodeConfig gcfsConfig.
                     * @member {google.container.v1.IGcfsConfig|null|undefined} gcfsConfig
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.gcfsConfig = null;
    
                    /**
                     * NodeConfig advancedMachineFeatures.
                     * @member {google.container.v1.IAdvancedMachineFeatures|null|undefined} advancedMachineFeatures
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.advancedMachineFeatures = null;
    
                    /**
                     * NodeConfig gvnic.
                     * @member {google.container.v1.IVirtualNIC|null|undefined} gvnic
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.gvnic = null;
    
                    /**
                     * NodeConfig spot.
                     * @member {boolean} spot
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.spot = false;
    
                    /**
                     * NodeConfig confidentialNodes.
                     * @member {google.container.v1.IConfidentialNodes|null|undefined} confidentialNodes
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.confidentialNodes = null;
    
                    /**
                     * NodeConfig fastSocket.
                     * @member {google.container.v1.IFastSocket|null|undefined} fastSocket
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.fastSocket = null;
    
                    /**
                     * NodeConfig resourceLabels.
                     * @member {Object.<string,string>} resourceLabels
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.resourceLabels = $util.emptyObject;
    
                    /**
                     * NodeConfig loggingConfig.
                     * @member {google.container.v1.INodePoolLoggingConfig|null|undefined} loggingConfig
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.loggingConfig = null;
    
                    /**
                     * NodeConfig windowsNodeConfig.
                     * @member {google.container.v1.IWindowsNodeConfig|null|undefined} windowsNodeConfig
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.windowsNodeConfig = null;
    
                    /**
                     * NodeConfig localNvmeSsdBlockConfig.
                     * @member {google.container.v1.ILocalNvmeSsdBlockConfig|null|undefined} localNvmeSsdBlockConfig
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.localNvmeSsdBlockConfig = null;
    
                    /**
                     * NodeConfig ephemeralStorageLocalSsdConfig.
                     * @member {google.container.v1.IEphemeralStorageLocalSsdConfig|null|undefined} ephemeralStorageLocalSsdConfig
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.ephemeralStorageLocalSsdConfig = null;
    
                    /**
                     * NodeConfig soleTenantConfig.
                     * @member {google.container.v1.ISoleTenantConfig|null|undefined} soleTenantConfig
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.soleTenantConfig = null;
    
                    /**
                     * NodeConfig containerdConfig.
                     * @member {google.container.v1.IContainerdConfig|null|undefined} containerdConfig
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.containerdConfig = null;
    
                    /**
                     * NodeConfig resourceManagerTags.
                     * @member {google.container.v1.IResourceManagerTags|null|undefined} resourceManagerTags
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.resourceManagerTags = null;
    
                    /**
                     * NodeConfig enableConfidentialStorage.
                     * @member {boolean} enableConfidentialStorage
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.enableConfidentialStorage = false;
    
                    /**
                     * NodeConfig secondaryBootDisks.
                     * @member {Array.<google.container.v1.ISecondaryBootDisk>} secondaryBootDisks
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.secondaryBootDisks = $util.emptyArray;
    
                    /**
                     * NodeConfig storagePools.
                     * @member {Array.<string>} storagePools
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.storagePools = $util.emptyArray;
    
                    /**
                     * NodeConfig secondaryBootDiskUpdateStrategy.
                     * @member {google.container.v1.ISecondaryBootDiskUpdateStrategy|null|undefined} secondaryBootDiskUpdateStrategy
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.secondaryBootDiskUpdateStrategy = null;
    
                    /**
                     * NodeConfig localSsdEncryptionMode.
                     * @member {google.container.v1.NodeConfig.LocalSsdEncryptionMode|null|undefined} localSsdEncryptionMode
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.localSsdEncryptionMode = null;
    
                    /**
                     * NodeConfig effectiveCgroupMode.
                     * @member {google.container.v1.NodeConfig.EffectiveCgroupMode} effectiveCgroupMode
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    NodeConfig.prototype.effectiveCgroupMode = 0;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * NodeConfig _fastSocket.
                     * @member {"fastSocket"|undefined} _fastSocket
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    Object.defineProperty(NodeConfig.prototype, "_fastSocket", {
                        get: $util.oneOfGetter($oneOfFields = ["fastSocket"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * NodeConfig _secondaryBootDiskUpdateStrategy.
                     * @member {"secondaryBootDiskUpdateStrategy"|undefined} _secondaryBootDiskUpdateStrategy
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    Object.defineProperty(NodeConfig.prototype, "_secondaryBootDiskUpdateStrategy", {
                        get: $util.oneOfGetter($oneOfFields = ["secondaryBootDiskUpdateStrategy"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * NodeConfig _localSsdEncryptionMode.
                     * @member {"localSsdEncryptionMode"|undefined} _localSsdEncryptionMode
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     */
                    Object.defineProperty(NodeConfig.prototype, "_localSsdEncryptionMode", {
                        get: $util.oneOfGetter($oneOfFields = ["localSsdEncryptionMode"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new NodeConfig instance using the specified properties.
                     * @function create
                     * @memberof google.container.v1.NodeConfig
                     * @static
                     * @param {google.container.v1.INodeConfig=} [properties] Properties to set
                     * @returns {google.container.v1.NodeConfig} NodeConfig instance
                     */
                    NodeConfig.create = function create(properties) {
                        return new NodeConfig(properties);
                    };
    
                    /**
                     * Encodes the specified NodeConfig message. Does not implicitly {@link google.container.v1.NodeConfig.verify|verify} messages.
                     * @function encode
                     * @memberof google.container.v1.NodeConfig
                     * @static
                     * @param {google.container.v1.INodeConfig} message NodeConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NodeConfig.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.machineType != null && Object.hasOwnProperty.call(message, "machineType"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.machineType);
                        if (message.diskSizeGb != null && Object.hasOwnProperty.call(message, "diskSizeGb"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.diskSizeGb);
                        if (message.oauthScopes != null && message.oauthScopes.length)
                            for (var i = 0; i < message.oauthScopes.length; ++i)
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.oauthScopes[i]);
                        if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                            for (var keys = Object.keys(message.metadata), i = 0; i < keys.length; ++i)
                                writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.metadata[keys[i]]).ldelim();
                        if (message.imageType != null && Object.hasOwnProperty.call(message, "imageType"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.imageType);
                        if (message.labels != null && Object.hasOwnProperty.call(message, "labels"))
                            for (var keys = Object.keys(message.labels), i = 0; i < keys.length; ++i)
                                writer.uint32(/* id 6, wireType 2 =*/50).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.labels[keys[i]]).ldelim();
                        if (message.localSsdCount != null && Object.hasOwnProperty.call(message, "localSsdCount"))
                            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.localSsdCount);
                        if (message.tags != null && message.tags.length)
                            for (var i = 0; i < message.tags.length; ++i)
                                writer.uint32(/* id 8, wireType 2 =*/66).string(message.tags[i]);
                        if (message.serviceAccount != null && Object.hasOwnProperty.call(message, "serviceAccount"))
                            writer.uint32(/* id 9, wireType 2 =*/74).string(message.serviceAccount);
                        if (message.preemptible != null && Object.hasOwnProperty.call(message, "preemptible"))
                            writer.uint32(/* id 10, wireType 0 =*/80).bool(message.preemptible);
                        if (message.accelerators != null && message.accelerators.length)
                            for (var i = 0; i < message.accelerators.length; ++i)
                                $root.google.container.v1.AcceleratorConfig.encode(message.accelerators[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                        if (message.diskType != null && Object.hasOwnProperty.call(message, "diskType"))
                            writer.uint32(/* id 12, wireType 2 =*/98).string(message.diskType);
                        if (message.minCpuPlatform != null && Object.hasOwnProperty.call(message, "minCpuPlatform"))
                            writer.uint32(/* id 13, wireType 2 =*/106).string(message.minCpuPlatform);
                        if (message.workloadMetadataConfig != null && Object.hasOwnProperty.call(message, "workloadMetadataConfig"))
                            $root.google.container.v1.WorkloadMetadataConfig.encode(message.workloadMetadataConfig, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                        if (message.taints != null && message.taints.length)
                            for (var i = 0; i < message.taints.length; ++i)
                                $root.google.container.v1.NodeTaint.encode(message.taints[i], writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
                        if (message.sandboxConfig != null && Object.hasOwnProperty.call(message, "sandboxConfig"))
                            $root.google.container.v1.SandboxConfig.encode(message.sandboxConfig, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
                        if (message.nodeGroup != null && Object.hasOwnProperty.call(message, "nodeGroup"))
                            writer.uint32(/* id 18, wireType 2 =*/146).string(message.nodeGroup);
                        if (message.reservationAffinity != null && Object.hasOwnProperty.call(message, "reservationAffinity"))
                            $root.google.container.v1.ReservationAffinity.encode(message.reservationAffinity, writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();
                        if (message.shieldedInstanceConfig != null && Object.hasOwnProperty.call(message, "shieldedInstanceConfig"))
                            $root.google.container.v1.ShieldedInstanceConfig.encode(message.shieldedInstanceConfig, writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();
                        if (message.linuxNodeConfig != null && Object.hasOwnProperty.call(message, "linuxNodeConfig"))
                            $root.google.container.v1.LinuxNodeConfig.encode(message.linuxNodeConfig, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();
                        if (message.kubeletConfig != null && Object.hasOwnProperty.call(message, "kubeletConfig"))
                            $root.google.container.v1.NodeKubeletConfig.encode(message.kubeletConfig, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();
                        if (message.bootDiskKmsKey != null && Object.hasOwnProperty.call(message, "bootDiskKmsKey"))
                            writer.uint32(/* id 23, wireType 2 =*/186).string(message.bootDiskKmsKey);
                        if (message.gcfsConfig != null && Object.hasOwnProperty.call(message, "gcfsConfig"))
                            $root.google.container.v1.GcfsConfig.encode(message.gcfsConfig, writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();
                        if (message.advancedMachineFeatures != null && Object.hasOwnProperty.call(message, "advancedMachineFeatures"))
                            $root.google.container.v1.AdvancedMachineFeatures.encode(message.advancedMachineFeatures, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();
                        if (message.gvnic != null && Object.hasOwnProperty.call(message, "gvnic"))
                            $root.google.container.v1.VirtualNIC.encode(message.gvnic, writer.uint32(/* id 29, wireType 2 =*/234).fork()).ldelim();
                        if (message.spot != null && Object.hasOwnProperty.call(message, "spot"))
                            writer.uint32(/* id 32, wireType 0 =*/256).bool(message.spot);
                        if (message.confidentialNodes != null && Object.hasOwnProperty.call(message, "confidentialNodes"))
                            $root.google.container.v1.ConfidentialNodes.encode(message.confidentialNodes, writer.uint32(/* id 35, wireType 2 =*/282).fork()).ldelim();
                        if (message.fastSocket != null && Object.hasOwnProperty.call(message, "fastSocket"))
                            $root.google.container.v1.FastSocket.encode(message.fastSocket, writer.uint32(/* id 36, wireType 2 =*/290).fork()).ldelim();
                        if (message.resourceLabels != null && Object.hasOwnProperty.call(message, "resourceLabels"))
                            for (var keys = Object.keys(message.resourceLabels), i = 0; i < keys.length; ++i)
                                writer.uint32(/* id 37, wireType 2 =*/298).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.resourceLabels[keys[i]]).ldelim();
                        if (message.loggingConfig != null && Object.hasOwnProperty.call(message, "loggingConfig"))
                            $root.google.container.v1.NodePoolLoggingConfig.encode(message.loggingConfig, writer.uint32(/* id 38, wireType 2 =*/306).fork()).ldelim();
                        if (message.windowsNodeConfig != null && Object.hasOwnProperty.call(message, "windowsNodeConfig"))
                            $root.google.container.v1.WindowsNodeConfig.encode(message.windowsNodeConfig, writer.uint32(/* id 39, wireType 2 =*/314).fork()).ldelim();
                        if (message.localNvmeSsdBlockConfig != null && Object.hasOwnProperty.call(message, "localNvmeSsdBlockConfig"))
                            $root.google.container.v1.LocalNvmeSsdBlockConfig.encode(message.localNvmeSsdBlockConfig, writer.uint32(/* id 40, wireType 2 =*/322).fork()).ldelim();
                        if (message.ephemeralStorageLocalSsdConfig != null && Object.hasOwnProperty.call(message, "ephemeralStorageLocalSsdConfig"))
                            $root.google.container.v1.EphemeralStorageLocalSsdConfig.encode(message.ephemeralStorageLocalSsdConfig, writer.uint32(/* id 41, wireType 2 =*/330).fork()).ldelim();
                        if (message.soleTenantConfig != null && Object.hasOwnProperty.call(message, "soleTenantConfig"))
                            $root.google.container.v1.SoleTenantConfig.encode(message.soleTenantConfig, writer.uint32(/* id 42, wireType 2 =*/338).fork()).ldelim();
                        if (message.containerdConfig != null && Object.hasOwnProperty.call(message, "containerdConfig"))
                            $root.google.container.v1.ContainerdConfig.encode(message.containerdConfig, writer.uint32(/* id 43, wireType 2 =*/346).fork()).ldelim();
                        if (message.resourceManagerTags != null && Object.hasOwnProperty.call(message, "resourceManagerTags"))
                            $root.google.container.v1.ResourceManagerTags.encode(message.resourceManagerTags, writer.uint32(/* id 45, wireType 2 =*/362).fork()).ldelim();
                        if (message.enableConfidentialStorage != null && Object.hasOwnProperty.call(message, "enableConfidentialStorage"))
                            writer.uint32(/* id 46, wireType 0 =*/368).bool(message.enableConfidentialStorage);
                        if (message.secondaryBootDisks != null && message.secondaryBootDisks.length)
                            for (var i = 0; i < message.secondaryBootDisks.length; ++i)
                                $root.google.container.v1.SecondaryBootDisk.encode(message.secondaryBootDisks[i], writer.uint32(/* id 48, wireType 2 =*/386).fork()).ldelim();
                        if (message.storagePools != null && message.storagePools.length)
                            for (var i = 0; i < message.storagePools.length; ++i)
                                writer.uint32(/* id 49, wireType 2 =*/394).string(message.storagePools[i]);
                        if (message.secondaryBootDiskUpdateStrategy != null && Object.hasOwnProperty.call(message, "secondaryBootDiskUpdateStrategy"))
                            $root.google.container.v1.SecondaryBootDiskUpdateStrategy.encode(message.secondaryBootDiskUpdateStrategy, writer.uint32(/* id 50, wireType 2 =*/402).fork()).ldelim();
                        if (message.localSsdEncryptionMode != null && Object.hasOwnProperty.call(message, "localSsdEncryptionMode"))
                            writer.uint32(/* id 54, wireType 0 =*/432).int32(message.localSsdEncryptionMode);
                        if (message.effectiveCgroupMode != null && Object.hasOwnProperty.call(message, "effectiveCgroupMode"))
                            writer.uint32(/* id 55, wireType 0 =*/440).int32(message.effectiveCgroupMode);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NodeConfig message, length delimited. Does not implicitly {@link google.container.v1.NodeConfig.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.container.v1.NodeConfig
                     * @static
                     * @param {google.container.v1.INodeConfig} message NodeConfig message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NodeConfig.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NodeConfig message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.container.v1.NodeConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.container.v1.NodeConfig} NodeConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NodeConfig.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.container.v1.NodeConfig(), key, value;
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.machineType = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.diskSizeGb = reader.int32();
                                    break;
                                }
                            case 3: {
                                    if (!(message.oauthScopes && message.oauthScopes.length))
                                        message.oauthScopes = [];
                                    message.oauthScopes.push(reader.string());
                                    break;
                                }
                            case 9: {
                                    message.serviceAccount = reader.string();
                                    break;
                                }
                            case 4: {
                                    if (message.metadata === $util.emptyObject)
                                        message.metadata = {};
                                    var end2 = reader.uint32() + reader.pos;
                                    key = "";
                                    value = "";
                                    while (reader.pos < end2) {
                                        var tag2 = reader.uint32();
                                        switch (tag2 >>> 3) {
                                        case 1:
                                            key = reader.string();
                                            break;
                                        case 2:
                                            value = reader.string();
                                            break;
                                        default:
                                            reader.skipType(tag2 & 7);
                                            break;
                                        }
                                    }
                                    message.metadata[key] = value;
                                    break;
                                }
                            case 5: {
                                    message.imageType = reader.string();
                                    break;
                                }
                            case 6: {
                                    if (message.labels === $util.emptyObject)
                                        message.labels = {};
                                    var end2 = reader.uint32() + reader.pos;
                                    key = "";
                                    value = "";
                                    while (reader.pos < end2) {
                                        var tag2 = reader.uint32();
                                        switch (tag2 >>> 3) {
                                        case 1:
                                            key = reader.string();
                                            break;
                                        case 2:
                                            value = reader.string();
                                            break;
                                        default:
                                            reader.skipType(tag2 & 7);
                                            break;
                                        }
                                    }
                                    message.labels[key] = value;
                                    break;
                                }
                            case 7: {
                                    message.localSsdCount = reader.int32();
                                    break;
                                }
                            case 8: {
                                    if (!(message.tags && message.tags.length))
                                        message.tags = [];
                                    message.tags.push(reader.string());
                                    break;
                                }
                            case 10: {
                                    message.preemptible = reader.bool();
                                    break;
                                }
                            case 11: {
                                    if (!(message.accelerators && message.accelerators.length))
                                        message.accelerators = [];
                                    message.accelerators.push($root.google.container.v1.AcceleratorConfig.decode(reader, reader.uint32()));
                                    break;
                                }
                            case 12: {
                                    message.diskType = reader.string();
                                    break;
                                }
                            case 13: {
                                    message.minCpuPlatform = reader.string();
                                    break;
                                }
                            case 14: {
                                    message.workloadMetadataConfig = $root.google.container.v1.WorkloadMetadataConfig.decode(reader, reader.uint32());
                                    break;
                                }
                            case 15: {
                                    if (!(message.taints && message.taints.length))
                                        message.taints = [];
                                    message.taints.push($root.google.container.v1.NodeTaint.decode(reader, reader.uint32()));
                                    break;
                                }
                            case 17: {
                                    message.sandboxConfig = $root.google.container.v1.SandboxConfig.decode(reader, reader.uint32());
                                    break;
                                }
                            case 18: {
                                    message.nodeGroup = reader.string();
                                    break;
                                }
                            case 19: {
                                    message.reservationAffinity = $root.google.container.v1.ReservationAffinity.decode(reader, reader.uint32());
                                    break;
                                }
                            case 20: {
                                    message.shieldedInstanceConfig = $root.google.container.v1.ShieldedInstanceConfig.decode(reader, reader.uint32());
                                    break;
                                }
                            case 21: {
                                    message.linuxNodeConfig = $root.google.container.v1.LinuxNodeConfig.decode(reader, reader.uint32());
                                    break;
                                }
                            case 22: {
                                    message.kubeletConfig = $root.google.container.v1.NodeKubeletConfig.decode(reader, reader.uint32());
                                    break;
                                }
                            case 23: {
                                    message.bootDiskKmsKey = reader.string();
                                    break;
                                }
                            case 25: {
                                    message.gcfsConfig = $root.google.container.v1.GcfsConfig.decode(reader, reader.uint32());
                                    break;
                                }
                            case 26: {
                                    message.advancedMachineFeatures = $root.google.container.v1.AdvancedMachineFeatures.decode(reader, reader.uint32());
                                    break;
                                }
                            case 29: {
                                    message.gvnic = $root.google.container.v1.VirtualNIC.decode(reader, reader.uint32());
                                    break;
                                }
                            case 32: {
                                    message.spot = reader.bool();
                                    break;
                                }
                            case 35: {
                                    message.confidentialNodes = $root.google.container.v1.ConfidentialNodes.decode(reader, reader.uint32());
                                    break;
                                }
                            case 36: {
                                    message.fastSocket = $root.google.container.v1.FastSocket.decode(reader, reader.uint32());
                                    break;
                                }
                            case 37: {
                                    if (message.resourceLabels === $util.emptyObject)
                                        message.resourceLabels = {};
                                    var end2 = reader.uint32() + reader.pos;
                                    key = "";
                                    value = "";
                                    while (reader.pos < end2) {
                                        var tag2 = reader.uint32();
                                        switch (tag2 >>> 3) {
                                        case 1:
                                            key = reader.string();
                                            break;
                                        case 2:
                                            value = reader.string();
                                            break;
                                        default:
                                            reader.skipType(tag2 & 7);
                                            break;
                                        }
                                    }
                                    message.resourceLabels[key] = value;
                                    break;
                                }
                            case 38: {
                                    message.loggingConfig = $root.google.container.v1.NodePoolLoggingConfig.decode(reader, reader.uint32());
                                    break;
                                }
                            case 39: {
                                    message.windowsNodeConfig = $root.google.container.v1.WindowsNodeConfig.decode(reader, reader.uint32());
                                    break;
                                }
                            case 40: {
                                    message.localNvmeSsdBlockConfig = $root.google.container.v1.LocalNvmeSsdBlockConfig.decode(reader, reader.uint32());
                                    break;
                                }
                            case 41: {
                                    message.ephemeralStorageLocalSsdConfig = $root.google.container.v1.EphemeralStorageLocalSsdConfig.decode(reader, reader.uint32());
                                    break;
                                }
                            case 42: {
                                    message.soleTenantConfig = $root.google.container.v1.SoleTenantConfig.decode(reader, reader.uint32());
                                    break;
                                }
                            case 43: {
                                    message.containerdConfig = $root.google.container.v1.ContainerdConfig.decode(reader, reader.uint32());
                                    break;
                                }
                            case 45: {
                                    message.resourceManagerTags = $root.google.container.v1.ResourceManagerTags.decode(reader, reader.uint32());
                                    break;
                                }
                            case 46: {
                                    message.enableConfidentialStorage = reader.bool();
                                    break;
                                }
                            case 48: {
                                    if (!(message.secondaryBootDisks && message.secondaryBootDisks.length))
                                        message.secondaryBootDisks = [];
                                    message.secondaryBootDisks.push($root.google.container.v1.SecondaryBootDisk.decode(reader, reader.uint32()));
                                    break;
                                }
                            case 49: {
                                    if (!(message.storagePools && message.storagePools.length))
                                        message.storagePools = [];
                                    message.storagePools.push(reader.string());
                                    break;
                                }
                            case 50: {
                                    message.secondaryBootDiskUpdateStrategy = $root.google.container.v1.SecondaryBootDiskUpdateStrategy.decode(reader, reader.uint32());
                                    break;
                                }
                            case 54: {
                                    message.localSsdEncryptionMode = reader.int32();
                                    break;
                                }
                            case 55: {
                                    message.effectiveCgroupMode = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a NodeConfig message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.container.v1.NodeConfig
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.container.v1.NodeConfig} NodeConfig
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NodeConfig.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NodeConfig message.
                     * @function verify
                     * @memberof google.container.v1.NodeConfig
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NodeConfig.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.machineType != null && message.hasOwnProperty("machineType"))
                            if (!$util.isString(message.machineType))
                                return "machineType: string expected";
                        if (message.diskSizeGb != null && message.hasOwnProperty("diskSizeGb"))
                            if (!$util.isInteger(message.diskSizeGb))
                                return "diskSizeGb: integer expected";
                        if (message.oauthScopes != null && message.hasOwnProperty("oauthScopes")) {
                            if (!Array.isArray(message.oauthScopes))
                                return "oauthScopes: array expected";
                            for (var i = 0; i < message.oauthScopes.length; ++i)
                                if (!$util.isString(message.oauthScopes[i]))
                                    return "oauthScopes: string[] expected";
                        }
                        if (message.serviceAccount != null && message.hasOwnProperty("serviceAccount"))
                            if (!$util.isString(message.serviceAccount))
                                return "serviceAccount: string expected";
                        if (message.metadata != null && message.hasOwnProperty("metadata")) {
                            if (!$util.isObject(message.metadata))
                                return "metadata: object expected";
                            var key = Object.keys(message.metadata);
                            for (var i = 0; i < key.length; ++i)
                                if (!$util.isString(message.metadata[key[i]]))
                                    return "metadata: string{k:string} expected";
                        }
                        if (message.imageType != null && message.hasOwnProperty("imageType"))
                            if (!$util.isString(message.imageType))
                                return "imageType: string expected";
                        if (message.labels != null && message.hasOwnProperty("labels")) {
                            if (!$util.isObject(message.labels))
                                return "labels: object expected";
                            var key = Object.keys(message.labels);
                            for (var i = 0; i < key.length; ++i)
                                if (!$util.isString(message.labels[key[i]]))
                                    return "labels: string{k:string} expected";
                        }
                        if (message.localSsdCount != null && message.hasOwnProperty("localSsdCount"))
                            if (!$util.isInteger(message.localSsdCount))
                                return "localSsdCount: integer expected";
                        if (message.tags != null && message.hasOwnProperty("tags")) {
                            if (!Array.isArray(message.tags))
                                return "tags: array expected";
                            for (var i = 0; i < message.tags.length; ++i)
                                if (!$util.isString(message.tags[i]))
                                    return "tags: string[] expected";
                        }
                        if (message.preemptible != null && message.hasOwnProperty("preemptible"))
                            if (typeof message.preemptible !== "boolean")
                                return "preemptible: boolean expected";
                        if (message.accelerators != null && message.hasOwnProperty("accelerators")) {
                            if (!Array.isArray(message.accelerators))
                                return "accelerators: array expected";
                            for (var i = 0; i < message.accelerators.length; ++i) {
                                var error = $root.google.container.v1.AcceleratorConfig.verify(message.accelerators[i]);
                                if (error)
                                    return "accelerators." + error;
                            }
                        }
                        if (message.diskType != null && message.hasOwnProperty("diskType"))
                            if (!$util.isString(message.diskType))
                                return "diskType: string expected";
                        if (message.minCpuPlatform != null && message.hasOwnProperty("minCpuPlatform"))
                            if (!$util.isString(message.minCpuPlatform))
                                return "minCpuPlatform: string expected";
                        if (message.workloadMetadataConfig != null && message.hasOwnProperty("workloadMetadataConfig")) {
                            var error = $root.google.container.v1.WorkloadMetadataConfig.verify(message.workloadMetadataConfig);
                            if (error)
                                return "workloadMetadataConfig." + error;
                        }
                        if (message.taints != null && message.hasOwnProperty("taints")) {
                            if (!Array.isArray(message.taints))
                                return "taints: array expected";
                            for (var i = 0; i < message.taints.length; ++i) {
                                var error = $root.google.container.v1.NodeTaint.verify(message.taints[i]);
                                if (error)
                                    return "taints." + error;
                            }
                        }
                        if (message.sandboxConfig != null && message.hasOwnProperty("sandboxConfig")) {
                            var error = $root.google.container.v1.SandboxConfig.verify(message.sandboxConfig);
                            if (error)
                                return "sandboxConfig." + error;
                        }
                        if (message.nodeGroup != null && message.hasOwnProperty("nodeGroup"))
                            if (!$util.isString(message.nodeGroup))
                                return "nodeGroup: string expected";
                        if (message.reservationAffinity != null && message.hasOwnProperty("reservationAffinity")) {
                            var error = $root.google.container.v1.ReservationAffinity.verify(message.reservationAffinity);
                            if (error)
                                return "reservationAffinity." + error;
                        }
                        if (message.shieldedInstanceConfig != null && message.hasOwnProperty("shieldedInstanceConfig")) {
                            var error = $root.google.container.v1.ShieldedInstanceConfig.verify(message.shieldedInstanceConfig);
                            if (error)
                                return "shieldedInstanceConfig." + error;
                        }
                        if (message.linuxNodeConfig != null && message.hasOwnProperty("linuxNodeConfig")) {
                            var error = $root.google.container.v1.LinuxNodeConfig.verify(message.linuxNodeConfig);
                            if (error)
                                return "linuxNodeConfig." + error;
                        }
                        if (message.kubeletConfig != null && message.hasOwnProperty("kubeletConfig")) {
                            var error = $root.google.container.v1.NodeKubeletConfig.verify(message.kubeletConfig);
                            if (error)
                                return "kubeletConfig." + error;
                        }
                        if (message.bootDiskKmsKey != null && message.hasOwnProperty("bootDiskKmsKey"))
                            if (!$util.isString(message.bootDiskKmsKey))
                                return "bootDiskKmsKey: string expected";
                        if (message.gcfsConfig != null && message.hasOwnProperty("gcfsConfig")) {
                            var error = $root.google.container.v1.GcfsConfig.verify(message.gcfsConfig);
                            if (error)
                                return "gcfsConfig." + error;
                        }
                        if (message.advancedMachineFeatures != null && message.hasOwnProperty("advancedMachineFeatures")) {
                            var error = $root.google.container.v1.AdvancedMachineFeatures.verify(message.advancedMachineFeatures);
                            if (error)
                                return "advancedMachineFeatures." + error;
                        }
                        if (message.gvnic != null && message.hasOwnProperty("gvnic")) {
                            var error = $root.google.container.v1.VirtualNIC.verify(message.gvnic);
                            if (error)
                                return "gvnic." + error;
                        }
                        if (message.spot != null && message.hasOwnProperty("spot"))
                            if (typeof message.spot !== "boolean")
                                return "spot: boolean expected";
                        if (message.confidentialNodes != null && message.hasOwnProperty("confidentialNodes")) {
                            var error = $root.google.container.v1.ConfidentialNodes.verify(message.confidentialNodes);
                            if (error)
                                return "confidentialNodes." + error;
                        }
                        if (message.fastSocket != null && message.hasOwnProperty("fastSocket")) {
                            properties._fastSocket = 1;
                            {
                                var error = $root.google.container.v1.FastSocket.verify(message.fastSocket);
                                if (error)
                                    return "fastSocket." + error;
                            }
                        }
                        if (message.resourceLabels != null && message.hasOwnProperty("resourceLabels")) {
                            if (!$util.isObject(message.resourceLabels))
                                return "resourceLabels: object expected";
                            var key = Object.keys(message.resourceLabels);
                            for (var i = 0; i < key.length; ++i)
                                if (!$util.isString(message.resourceLabels[key[i]]))
                                    return "resourceLabels: string{k:string} expected";
                        }
                        if (message.loggingConfig != null && message.hasOwnProperty("loggingConfig")) {
                            var error = $root.google.container.v1.NodePoolLoggingConfig.verify(message.loggingConfig);
                            if (error)
                                return "loggingConfig." + error;
                        }
                        if (message.windowsNodeConfig != null && message.hasOwnProperty("windowsNodeConfig")) {
                            var error = $root.google.container.v1.WindowsNodeConfig.verify(message.windowsNodeConfig);
                            if (error)
                                return "windowsNodeConfig." + error;
                        }
                        if (message.localNvmeSsdBlockConfig != null && message.hasOwnProperty("localNvmeSsdBlockConfig")) {
                            var error = $root.google.container.v1.LocalNvmeSsdBlockConfig.verify(message.localNvmeSsdBlockConfig);
                            if (error)
                                return "localNvmeSsdBlockConfig." + error;
                        }
                        if (message.ephemeralStorageLocalSsdConfig != null && message.hasOwnProperty("ephemeralStorageLocalSsdConfig")) {
                            var error = $root.google.container.v1.EphemeralStorageLocalSsdConfig.verify(message.ephemeralStorageLocalSsdConfig);
                            if (error)
                                return "ephemeralStorageLocalSsdConfig." + error;
                        }
                        if (message.soleTenantConfig != null && message.hasOwnProperty("soleTenantConfig")) {
                            var error = $root.google.container.v1.SoleTenantConfig.verify(message.soleTenantConfig);
                            if (error)
                                return "soleTenantConfig." + error;
                        }
                        if (message.containerdConfig != null && message.hasOwnProperty("containerdConfig")) {
                            var error = $root.google.container.v1.ContainerdConfig.verify(message.containerdConfig);
                            if (error)
                                return "containerdConfig." + error;
                        }
                        if (message.resourceManagerTags != null && message.hasOwnProperty("resourceManagerTags")) {
                            var error = $root.google.container.v1.ResourceManagerTags.verify(message.resourceManagerTags);
                            if (error)
                                return "resourceManagerTags." + error;
                        }
                        if (message.enableConfidentialStorage != null && message.hasOwnProperty("enableConfidentialStorage"))
                            if (typeof message.enableConfidentialStorage !== "boolean")
                                return "enableConfidentialStorage: boolean expected";
                        if (message.secondaryBootDisks != null && message.hasOwnProperty("secondaryBootDisks")) {
                            if (!Array.isArray(message.secondaryBootDisks))
                                return "secondaryBootDisks: array expected";
                            for (var i = 0; i < message.secondaryBootDisks.length; ++i) {
                                var error = $root.google.container.v1.SecondaryBootDisk.verify(message.secondaryBootDisks[i]);
                                if (error)
                                    return "secondaryBootDisks." + error;
                            }
                        }
                        if (message.storagePools != null && message.hasOwnProperty("storagePools")) {
                            if (!Array.isArray(message.storagePools))
                                return "storagePools: array expected";
                            for (var i = 0; i < message.storagePools.length; ++i)
                                if (!$util.isString(message.storagePools[i]))
                                    return "storagePools: string[] expected";
                        }
                        if (message.secondaryBootDiskUpdateStrategy != null && message.hasOwnProperty("secondaryBootDiskUpdateStrategy")) {
                            properties._secondaryBootDiskUpdateStrategy = 1;
                            {
                                var error = $root.google.container.v1.SecondaryBootDiskUpdateStrategy.verify(message.secondaryBootDiskUpdateStrategy);
                                if (error)
                                    return "secondaryBootDiskUpdateStrategy." + error;
                            }
                        }
                        if (message.localSsdEncryptionMode != null && message.hasOwnProperty("localSsdEncryptionMode")) {
                            properties._localSsdEncryptionMode = 1;
                            switch (message.localSsdEncryptionMode) {
                            default:
                                return "localSsdEncryptionMode: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        }
                        if (message.effectiveCgroupMode != null && message.hasOwnProperty("effectiveCgroupMode"))
                            switch (message.effectiveCgroupMode) {
                            default:
                                return "effectiveCgroupMode: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates a NodeConfig message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.container.v1.NodeConfig
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.container.v1.NodeConfig} NodeConfig
                     */
                    NodeConfig.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.container.v1.NodeConfig)
                            return object;
                        var message = new $root.google.container.v1.NodeConfig();
                        if (object.machineType != null)
                            message.machineType = String(object.machineType);
                        if (object.diskSizeGb != null)
                            message.diskSizeGb = object.diskSizeGb | 0;
                        if (object.oauthScopes) {
                            if (!Array.isArray(object.oauthScopes))
                                throw TypeError(".google.container.v1.NodeConfig.oauthScopes: array expected");
                            message.oauthScopes = [];
                            for (var i = 0; i < object.oauthScopes.length; ++i)
                                message.oauthScopes[i] = String(object.oauthScopes[i]);
                        }
                        if (object.serviceAccount != null)
                            message.serviceAccount = String(object.serviceAccount);
                        if (object.metadata) {
                            if (typeof object.metadata !== "object")
                                throw TypeError(".google.container.v1.NodeConfig.metadata: object expected");
                            message.metadata = {};
                            for (var keys = Object.keys(object.metadata), i = 0; i < keys.length; ++i)
                                message.metadata[keys[i]] = String(object.metadata[keys[i]]);
                        }
                        if (object.imageType != null)
                            message.imageType = String(object.imageType);
                        if (object.labels) {
                            if (typeof object.labels !== "object")
                                throw TypeError(".google.container.v1.NodeConfig.labels: object expected");
                            message.labels = {};
                            for (var keys = Object.keys(object.labels), i = 0; i < keys.length; ++i)
                                message.labels[keys[i]] = String(object.labels[keys[i]]);
                        }
                        if (object.localSsdCount != null)
                            message.localSsdCount = object.localSsdCount | 0;
                        if (object.tags) {
                            if (!Array.isArray(object.tags))
                                throw TypeError(".google.container.v1.NodeConfig.tags: array expected");
                            message.tags = [];
                            for (var i = 0; i < object.tags.length; ++i)
                                message.tags[i] = String(object.tags[i]);
                        }
                        if (object.preemptible != null)
                            message.preemptible = Boolean(object.preemptible);
                        if (object.accelerators) {
                            if (!Array.isArray(object.accelerators))
                                throw TypeError(".google.container.v1.NodeConfig.accelerators: array expected");
                            message.accelerators = [];
                            for (var i = 0; i < object.accelerators.length; ++i) {
                                if (typeof object.accelerators[i] !== "object")
                                    throw TypeError(".google.container.v1.NodeConfig.accelerators: object expected");
                                message.accelerators[i] = $root.google.container.v1.AcceleratorConfig.fromObject(object.accelerators[i]);
                            }
                        }
                        if (object.diskType != null)
                            message.diskType = String(object.diskType);
                        if (object.minCpuPlatform != null)
                            message.minCpuPlatform = String(object.minCpuPlatform);
                        if (object.workloadMetadataConfig != null) {
                            if (typeof object.workloadMetadataConfig !== "object")
                                throw TypeError(".google.container.v1.NodeConfig.workloadMetadataConfig: object expected");
                            message.workloadMetadataConfig = $root.google.container.v1.WorkloadMetadataConfig.fromObject(object.workloadMetadataConfig);
                        }
                        if (object.taints) {
                            if (!Array.isArray(object.taints))
                                throw TypeError(".google.container.v1.NodeConfig.taints: array expected");
                            message.taints = [];
                            for (var i = 0; i < object.taints.length; ++i) {
                                if (typeof object.taints[i] !== "object")
                                    throw TypeError(".google.container.v1.NodeConfig.taints: object expected");
                                message.taints[i] = $root.google.container.v1.NodeTaint.fromObject(object.taints[i]);
                            }
                        }
                        if (object.sandboxConfig != null) {
                            if (typeof object.sandboxConfig !== "object")
                                throw TypeError(".google.container.v1.NodeConfig.sandboxConfig: object expected");
                            message.sandboxConfig = $root.google.container.v1.SandboxConfig.fromObject(object.sandboxConfig);
                        }
                        if (object.nodeGroup != null)
                            message.nodeGroup = String(object.nodeGroup);
                        if (object.reservationAffinity != null) {
                            if (typeof object.reservationAffinity !== "object")
                                throw TypeError(".google.container.v1.NodeConfig.reservationAffinity: object expected");
                            message.reservationAffinity = $root.google.container.v1.ReservationAffinity.fromObject(object.reservationAffinity);
                        }
                        if (object.shieldedInstanceConfig != null) {
                            if (typeof object.shieldedInstanceConfig !== "object")
                                throw TypeError(".google.container.v1.NodeConfig.shieldedInstanceConfig: object expected");
                            message.shieldedInstanceConfig = $root.google.container.v1.ShieldedInstanceConfig.fromObject(object.shieldedInstanceConfig);
                        }
                        if (object.linuxNodeConfig != null) {
                            if (typeof object.linuxNodeConfig !== "object")
                                throw TypeError(".google.container.v1.NodeConfig.linuxNodeConfig: object expected");
                            message.linuxNodeConfig = $root.google.container.v1.LinuxNodeConfig.fromObject(object.linuxNodeConfig);
                        }
                        if (object.kubeletConfig != null) {
                            if (typeof object.kubeletConfig !== "object")
                                throw TypeError(".google.container.v1.NodeConfig.kubeletConfig: object expected");
                            message.kubeletConfig = $root.google.container.v1.NodeKubeletConfig.fromObject(object.kubeletConfig);
                        }
                        if (object.bootDiskKmsKey != null)
                            message.bootDiskKmsKey = String(object.bootDiskKmsKey);
                        if (object.gcfsConfig != null) {
                            if (typeof object.gcfsConfig !== "object")
                                throw TypeError(".google.container.v1.NodeConfig.gcfsConfig: object expected");
                            message.gcfsConfig = $root.google.container.v1.GcfsConfig.fromObject(object.gcfsConfig);
                        }
                        if (object.advancedMachineFeatures != null) {
                            if (typeof object.advancedMachineFeatures !== "object")
                                throw TypeError(".google.container.v1.NodeConfig.advancedMachineFeatures: object expected");
                            message.advancedMachineFeatures = $root.google.container.v1.AdvancedMachineFeatures.fromObject(object.advancedMachineFeatures);
                        }
                        if (object.gvnic != null) {
                            if (typeof object.gvnic !== "object")
                                throw TypeError(".google.container.v1.NodeConfig.gvnic: object expected");
                            message.gvnic = $root.google.container.v1.VirtualNIC.fromObject(object.gvnic);
                        }
                        if (object.spot != null)
                            message.spot = Boolean(object.spot);
                        if (object.confidentialNodes != null) {
                            if (typeof object.confidentialNodes !== "object")
                                throw TypeError(".google.container.v1.NodeConfig.confidentialNodes: object expected");
                            message.confidentialNodes = $root.google.container.v1.ConfidentialNodes.fromObject(object.confidentialNodes);
                        }
                        if (object.fastSocket != null) {
                            if (typeof object.fastSocket !== "object")
                                throw TypeError(".google.container.v1.NodeConfig.fastSocket: object expected");
                            message.fastSocket = $root.google.container.v1.FastSocket.fromObject(object.fastSocket);
                        }
                        if (object.resourceLabels) {
                            if (typeof object.resourceLabels !== "object")
                                throw TypeError(".google.container.v1.NodeConfig.resourceLabels: object expected");
                            message.resourceLabels = {};
                            for (var keys = Object.keys(object.resourceLabels), i = 0; i < keys.length; ++i)
                                message.resourceLabels[keys[i]] = String(object.resourceLabels[keys[i]]);
                        }
                        if (object.loggingConfig != null) {
                            if (typeof object.loggingConfig !== "object")
                                throw TypeError(".google.container.v1.NodeConfig.loggingConfig: object expected");
                            message.loggingConfig = $root.google.container.v1.NodePoolLoggingConfig.fromObject(object.loggingConfig);
                        }
                        if (object.windowsNodeConfig != null) {
                            if (typeof object.windowsNodeConfig !== "object")
                                throw TypeError(".google.container.v1.NodeConfig.windowsNodeConfig: object expected");
                            message.windowsNodeConfig = $root.google.container.v1.WindowsNodeConfig.fromObject(object.windowsNodeConfig);
                        }
                        if (object.localNvmeSsdBlockConfig != null) {
                            if (typeof object.localNvmeSsdBlockConfig !== "object")
                                throw TypeError(".google.container.v1.NodeConfig.localNvmeSsdBlockConfig: object expected");
                            message.localNvmeSsdBlockConfig = $root.google.container.v1.LocalNvmeSsdBlockConfig.fromObject(object.localNvmeSsdBlockConfig);
                        }
                        if (object.ephemeralStorageLocalSsdConfig != null) {
                            if (typeof object.ephemeralStorageLocalSsdConfig !== "object")
                                throw TypeError(".google.container.v1.NodeConfig.ephemeralStorageLocalSsdConfig: object expected");
                            message.ephemeralStorageLocalSsdConfig = $root.google.container.v1.EphemeralStorageLocalSsdConfig.fromObject(object.ephemeralStorageLocalSsdConfig);
                        }
                        if (object.soleTenantConfig != null) {
                            if (typeof object.soleTenantConfig !== "object")
                                throw TypeError(".google.container.v1.NodeConfig.soleTenantConfig: object expected");
                            message.soleTenantConfig = $root.google.container.v1.SoleTenantConfig.fromObject(object.soleTenantConfig);
                        }
                        if (object.containerdConfig != null) {
                            if (typeof object.containerdConfig !== "object")
                                throw TypeError(".google.container.v1.NodeConfig.containerdConfig: object expected");
                            message.containerdConfig = $root.google.container.v1.ContainerdConfig.fromObject(object.containerdConfig);
                        }
                        if (object.resourceManagerTags != null) {
                            if (typeof object.resourceManagerTags !== "object")
                                throw TypeError(".google.container.v1.NodeConfig.resourceManagerTags: object expected");
                            message.resourceManagerTags = $root.google.container.v1.ResourceManagerTags.fromObject(object.resourceManagerTags);
                        }
                        if (object.enableConfidentialStorage != null)
                            message.enableConfidentialStorage = Boolean(object.enableConfidentialStorage);
                        if (object.secondaryBootDisks) {
                            if (!Array.isArray(object.secondaryBootDisks))
                                throw TypeError(".google.container.v1.NodeConfig.secondaryBootDisks: array expected");
                            message.secondaryBootDisks = [];
                            for (var i = 0; i < object.secondaryBootDisks.length; ++i) {
                                if (typeof object.secondaryBootDisks[i] !== "object")
                                    throw TypeError(".google.container.v1.NodeConfig.secondaryBootDisks: object expected");
                                message.secondaryBootDisks[i] = $root.google.container.v1.SecondaryBootDisk.fromObject(object.secondaryBootDisks[i]);
                            }
                        }
                        if (object.storagePools) {
                            if (!Array.isArray(object.storagePools))
                                throw TypeError(".google.container.v1.NodeConfig.storagePools: array expected");
                            message.storagePools = [];
                            for (var i = 0; i < object.storagePools.length; ++i)
                                message.storagePools[i] = String(object.storagePools[i]);
                        }
                        if (object.secondaryBootDiskUpdateStrategy != null) {
                            if (typeof object.secondaryBootDiskUpdateStrategy !== "object")
                                throw TypeError(".google.container.v1.NodeConfig.secondaryBootDiskUpdateStrategy: object expected");
                            message.secondaryBootDiskUpdateStrategy = $root.google.container.v1.SecondaryBootDiskUpdateStrategy.fromObject(object.secondaryBootDiskUpdateStrategy);
                        }
                        switch (object.localSsdEncryptionMode) {
                        default:
                            if (typeof object.localSsdEncryptionMode === "number") {
                                message.localSsdEncryptionMode = object.localSsdEncryptionMode;
                                break;
                            }
                            break;
                        case "LOCAL_SSD_ENCRYPTION_MODE_UNSPECIFIED":
                        case 0:
                            message.localSsdEncryptionMode = 0;
                            break;
                        case "STANDARD_ENCRYPTION":
                        case 1:
                            message.localSsdEncryptionMode = 1;
                            break;
                        case "EPHEMERAL_KEY_ENCRYPTION":
                        case 2:
                            message.localSsdEncryptionMode = 2;
                            break;
                        }
                        switch (object.effectiveCgroupMode) {
                        default:
                            if (typeof object.effectiveCgroupMode === "number") {
                                message.effectiveCgroupMode = object.effectiveCgroupMode;
                                break;
                            }
                            break;
                        case "EFFECTIVE_CGROUP_MODE_UNSPECIFIED":
                        case 0:
                            message.effectiveCgroupMode = 0;
                            break;
                        case "EFFECTIVE_CGROUP_MODE_V1":
                        case 1:
                            message.effectiveCgroupMode = 1;
                            break;
                        case "EFFECTIVE_CGROUP_MODE_V2":
                        case 2:
                            message.effectiveCgroupMode = 2;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NodeConfig message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.container.v1.NodeConfig
                     * @static
                     * @param {google.container.v1.NodeConfig} message NodeConfig
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NodeConfig.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.oauthScopes = [];
                            object.tags = [];
                            object.accelerators = [];
                            object.taints = [];
                            object.secondaryBootDisks = [];
                            object.storagePools = [];
                        }
                        if (options.objects || options.defaults) {
                            object.metadata = {};
                            object.labels = {};
                            object.resourceLabels = {};
                        }
                        if (options.defaults) {
                            object.machineType = "";
                            object.diskSizeGb = 0;
                            object.imageType = "";
                            object.localSsdCount = 0;
                            object.serviceAccount = "";
                            object.preemptible = false;
                            object.diskType = "";
                            object.minCpuPlatform = "";
                            object.workloadMetadataConfig = null;
                            object.sandboxConfig = null;
                            object.nodeGroup = "";
                            object.reservationAffinity = null;
                            object.shieldedInstanceConfig = null;
                            object.linuxNodeConfig = null;
                            object.kubeletConfig = null;
                            object.bootDiskKmsKey = "";
                            object.gcfsConfig = null;
                            object.advancedMachineFeatures = null;
                            object.gvnic = null;
                            object.spot = false;
                            object.confidentialNodes = null;
                            object.loggingConfig = null;
                            object.windowsNodeConfig = null;
                            object.localNvmeSsdBlockConfig = null;
                            object.ephemeralStorageLocalSsdConfig = null;
                            object.soleTenantConfig = null;
                            object.containerdConfig = null;
                            object.resourceManagerTags = null;
                            object.enableConfidentialStorage = false;
                            object.effectiveCgroupMode = options.enums === String ? "EFFECTIVE_CGROUP_MODE_UNSPECIFIED" : 0;
                        }
                        if (message.machineType != null && message.hasOwnProperty("machineType"))
                            object.machineType = message.machineType;
                        if (message.diskSizeGb != null && message.hasOwnProperty("diskSizeGb"))
                            object.diskSizeGb = message.diskSizeGb;
                        if (message.oauthScopes && message.oauthScopes.length) {
                            object.oauthScopes = [];
                            for (var j = 0; j < message.oauthScopes.length; ++j)
                                object.oauthScopes[j] = message.oauthScopes[j];
                        }
                        var keys2;
                        if (message.metadata && (keys2 = Object.keys(message.metadata)).length) {
                            object.metadata = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.metadata[keys2[j]] = message.metadata[keys2[j]];
                        }
                        if (message.imageType != null && message.hasOwnProperty("imageType"))
                            object.imageType = message.imageType;
                        if (message.labels && (keys2 = Object.keys(message.labels)).length) {
                            object.labels = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.labels[keys2[j]] = message.labels[keys2[j]];
                        }
                        if (message.localSsdCount != null && message.hasOwnProperty("localSsdCount"))
                            object.localSsdCount = message.localSsdCount;
                        if (message.tags && message.tags.length) {
                            object.tags = [];
                            for (var j = 0; j < message.tags.length; ++j)
                                object.tags[j] = message.tags[j];
                        }
                        if (message.serviceAccount != null && message.hasOwnProperty("serviceAccount"))
                            object.serviceAccount = message.serviceAccount;
                        if (message.preemptible != null && message.hasOwnProperty("preemptible"))
                            object.preemptible = message.preemptible;
                        if (message.accelerators && message.accelerators.length) {
                            object.accelerators = [];
                            for (var j = 0; j < message.accelerators.length; ++j)
                                object.accelerators[j] = $root.google.container.v1.AcceleratorConfig.toObject(message.accelerators[j], options);
                        }
                        if (message.diskType != null && message.hasOwnProperty("diskType"))
                            object.diskType = message.diskType;
                        if (message.minCpuPlatform != null && message.hasOwnProperty("minCpuPlatform"))
                            object.minCpuPlatform = message.minCpuPlatform;
                        if (message.workloadMetadataConfig != null && message.hasOwnProperty("workloadMetadataConfig"))
                            object.workloadMetadataConfig = $root.google.container.v1.WorkloadMetadataConfig.toObject(message.workloadMetadataConfig, options);
                        if (message.taints && message.taints.length) {
                            object.taints = [];
                            for (var j = 0; j < message.taints.length; ++j)
                                object.taints[j] = $root.google.container.v1.NodeTaint.toObject(message.taints[j], options);
                        }
                        if (message.sandboxConfig != null && message.hasOwnProperty("sandboxConfig"))
                            object.sandboxConfig = $root.google.container.v1.SandboxConfig.toObject(message.sandboxConfig, options);
                        if (message.nodeGroup != null && message.hasOwnProperty("nodeGroup"))
                            object.nodeGroup = message.nodeGroup;
                        if (message.reservationAffinity != null && message.hasOwnProperty("reservationAffinity"))
                            object.reservationAffinity = $root.google.container.v1.ReservationAffinity.toObject(message.reservationAffinity, options);
                        if (message.shieldedInstanceConfig != null && message.hasOwnProperty("shieldedInstanceConfig"))
                            object.shieldedInstanceConfig = $root.google.container.v1.ShieldedInstanceConfig.toObject(message.shieldedInstanceConfig, options);
                        if (message.linuxNodeConfig != null && message.hasOwnProperty("linuxNodeConfig"))
                            object.linuxNodeConfig = $root.google.container.v1.LinuxNodeConfig.toObject(message.linuxNodeConfig, options);
                        if (message.kubeletConfig != null && message.hasOwnProperty("kubeletConfig"))
                            object.kubeletConfig = $root.google.container.v1.NodeKubeletConfig.toObject(message.kubeletConfig, options);
                        if (message.bootDiskKmsKey != null && message.hasOwnProperty("bootDiskKmsKey"))
                            object.bootDiskKmsKey = message.bootDiskKmsKey;
                        if (message.gcfsConfig != null && message.hasOwnProperty("gcfsConfig"))
                            object.gcfsConfig = $root.google.container.v1.GcfsConfig.toObject(message.gcfsConfig, options);
                        if (message.advancedMachineFeatures != null && message.hasOwnProperty("advancedMachineFeatures"))
                            object.advancedMachineFeatures = $root.google.container.v1.AdvancedMachineFeatures.toObject(message.advancedMachineFeatures, options);
                        if (message.gvnic != null && message.hasOwnProperty("gvnic"))
                            object.gvnic = $root.google.container.v1.VirtualNIC.toObject(message.gvnic, options);
                        if (message.spot != null && message.hasOwnProperty("spot"))
                            object.spot = message.spot;
                        if (message.confidentialNodes != null && message.hasOwnProperty("confidentialNodes"))
                            object.confidentialNodes = $root.google.container.v1.ConfidentialNodes.toObject(message.confidentialNodes, options);
                        if (message.fastSocket != null && message.hasOwnProperty("fastSocket")) {
                            object.fastSocket = $root.google.container.v1.FastSocket.toObject(message.fastSocket, options);
                            if (options.oneofs)
                                object._fastSocket = "fastSocket";
                        }
                        if (message.resourceLabels && (keys2 = Object.keys(message.resourceLabels)).length) {
                            object.resourceLabels = {};
                            for (var j = 0; j < keys2.length; ++j)
                                object.resourceLabels[keys2[j]] = message.resourceLabels[keys2[j]];
                        }
                        if (message.loggingConfig != null && message.hasOwnProperty("loggingConfig"))
                            object.loggingConfig = $root.google.container.v1.NodePoolLoggingConfig.toObject(message.loggingConfig, options);
                        if (message.windowsNodeConfig != null && message.hasOwnProperty("windowsNodeConfig"))
                            object.windowsNodeConfig = $root.google.container.v1.WindowsNodeConfig.toObject(message.windowsNodeConfig, options);
                        if (message.localNvmeSsdBlockConfig != null && message.hasOwnProperty("localNvmeSsdBlockConfig"))
                            object.localNvmeSsdBlockConfig = $root.google.container.v1.LocalNvmeSsdBlockConfig.toObject(message.localNvmeSsdBlockConfig, options);
                        if (message.ephemeralStorageLocalSsdConfig != null && message.hasOwnProperty("ephemeralStorageLocalSsdConfig"))
                            object.ephemeralStorageLocalSsdConfig = $root.google.container.v1.EphemeralStorageLocalSsdConfig.toObject(message.ephemeralStorageLocalSsdConfig, options);
                        if (message.soleTenantConfig != null && message.hasOwnProperty("soleTenantConfig"))
                            object.soleTenantConfig = $root.google.container.v1.SoleTenantConfig.toObject(message.soleTenantConfig, options);
                        if (message.containerdConfig != null && message.hasOwnProperty("containerdConfig"))
                            object.containerdConfig = $root.google.container.v1.ContainerdConfig.toObject(message.containerdConfig, options);
                        if (message.resourceManagerTags != null && message.hasOwnProperty("resourceManagerTags"))
                            object.resourceManagerTags = $root.google.container.v1.ResourceManagerTags.toObject(message.resourceManagerTags, options);
                        if (message.enableConfidentialStorage != null && message.hasOwnProperty("enableConfidentialStorage"))
                            object.enableConfidentialStorage = message.enableConfidentialStorage;
                        if (message.secondaryBootDisks && message.secondaryBootDisks.length) {
                            object.secondaryBootDisks = [];
                            for (var j = 0; j < message.secondaryBootDisks.length; ++j)
                                object.secondaryBootDisks[j] = $root.google.container.v1.SecondaryBootDisk.toObject(message.secondaryBootDisks[j], options);
                        }
                        if (message.storagePools && message.storagePools.length) {
                            object.storagePools = [];
                            for (var j = 0; j < message.storagePools.length; ++j)
                                object.storagePools[j] = message.storagePools[j];
                        }
                        if (message.secondaryBootDiskUpdateStrategy != null && message.hasOwnProperty("secondaryBootDiskUpdateStrategy")) {
                            object.secondaryBootDiskUpdateStrategy = $root.google.container.v1.SecondaryBootDiskUpdateStrategy.toObject(message.secondaryBootDiskUpdateStrategy, options);
                            if (options.oneofs)
                                object._secondaryBootDiskUpdateStrategy = "secondaryBootDiskUpdateStrategy";
                        }
                        if (message.localSsdEncryptionMode != null && message.hasOwnProperty("localSsdEncryptionMode")) {
                            object.localSsdEncryptionMode = options.enums === String ? $root.google.container.v1.NodeConfig.LocalSsdEncryptionMode[message.localSsdEncryptionMode] === undefined ? message.localSsdEncryptionMode : $root.google.container.v1.NodeConfig.LocalSsdEncryptionMode[message.localSsdEncryptionMode] : message.localSsdEncryptionMode;
                            if (options.oneofs)
                                object._localSsdEncryptionMode = "localSsdEncryptionMode";
                        }
                        if (message.effectiveCgroupMode != null && message.hasOwnProperty("effectiveCgroupMode"))
                            object.effectiveCgroupMode = options.enums === String ? $root.google.container.v1.NodeConfig.EffectiveCgroupMode[message.effectiveCgroupMode] === undefined ? message.effectiveCgroupMode : $root.google.container.v1.NodeConfig.EffectiveCgroupMode[message.effectiveCgroupMode] : message.effectiveCgroupMode;
                        return object;
                    };
    
                    /**
                     * Converts this NodeConfig to JSON.
                     * @function toJSON
                     * @memberof google.container.v1.NodeConfig
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NodeConfig.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for NodeConfig
                     * @function getTypeUrl
                     * @memberof google.container.v1.NodeConfig
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    NodeConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.container.v1.NodeConfig";
                    };
    
                    /**
                     * LocalSsdEncryptionMode enum.
                     * @name google.container.v1.NodeConfig.LocalSsdEncryptionMode
                     * @enum {number}
                     * @property {number} LOCAL_SSD_ENCRYPTION_MODE_UNSPECIFIED=0 LOCAL_SSD_ENCRYPTION_MODE_UNSPECIFIED value
                     * @property {number} STANDARD_ENCRYPTION=1 STANDARD_ENCRYPTION value
                     * @property {number} EPHEMERAL_KEY_ENCRYPTION=2 EPHEMERAL_KEY_ENCRYPTION value
                     */
                    NodeConfig.LocalSsdEncryptionMode = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "LOCAL_SSD_ENCRYPTION_MODE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "STANDARD_ENCRYPTION"] = 1;
                        values[valuesById[2] = "EPHEMERAL_KEY_ENCRYPTION"] = 2;
                        return values;
                    })();
    
                    /**
                     * EffectiveCgroupMode enum.
                     * @name google.container.v1.NodeConfig.EffectiveCgroupMode
                     * @enum {number}
                     * @property {number} EFFECTIVE_CGROUP_MODE_UNSPECIFIED=0 EFFECTIVE_CGROUP_MODE_UNSPECIFIED value
                     * @property {number} EFFECTIVE_CGROUP_MODE_V1=1 EFFECTIVE_CGROUP_MODE_V1 value
                     * @property {number} EFFECTIVE_CGROUP_MODE_V2=2 EFFECTIVE_CGROUP_MODE_V2 value
                     */
                    NodeConfig.EffectiveCgroupMode = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "EFFECTIVE_CGROUP_MODE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "EFFECTIVE_CGROUP_MODE_V1"] = 1;
                        values[valuesById[2] = "EFFECTIVE_CGROUP_MODE_V2"] = 2;
                        return values;
                    })();
    
                    return NodeConfig;
                })();
    
                v1.AdvancedMachineFeatures = (function() {
    
                    /**
                     * Properties of an AdvancedMachineFeatures.
                     * @memberof google.container.v1
                     * @interface IAdvancedMachineFeatures
                     * @property {number|Long|null} [threadsPerCore] AdvancedMachineFeatures threadsPerCore
                     * @property {boolean|null} [enableNestedVirtualization] AdvancedMachineFeatures enableNestedVirtualization
                     */
    
                    /**
                     * Constructs a new AdvancedMachineFeatures.
                     * @memberof google.container.v1
                     * @classdesc Represents an AdvancedMachineFeatures.
                     * @implements IAdvancedMachineFeatures
                     * @constructor
                     * @param {google.container.v1.IAdvancedMachineFeatures=} [properties] Properties to set
                     */
                    function AdvancedMachineFeatures(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * AdvancedMachineFeatures threadsPerCore.
                     * @member {number|Long|null|undefined} threadsPerCore
                     * @memberof google.container.v1.AdvancedMachineFeatures
                     * @instance
                     */
                    AdvancedMachineFeatures.prototype.threadsPerCore = null;
    
                    /**
                     * AdvancedMachineFeatures enableNestedVirtualization.
                     * @member {boolean|null|undefined} enableNestedVirtualization
                     * @memberof google.container.v1.AdvancedMachineFeatures
                     * @instance
                     */
                    AdvancedMachineFeatures.prototype.enableNestedVirtualization = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * AdvancedMachineFeatures _threadsPerCore.
                     * @member {"threadsPerCore"|undefined} _threadsPerCore
                     * @memberof google.container.v1.AdvancedMachineFeatures
                     * @instance
                     */
                    Object.defineProperty(AdvancedMachineFeatures.prototype, "_threadsPerCore", {
                        get: $util.oneOfGetter($oneOfFields = ["threadsPerCore"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * AdvancedMachineFeatures _enableNestedVirtualization.
                     * @member {"enableNestedVirtualization"|undefined} _enableNestedVirtualization
                     * @memberof google.container.v1.AdvancedMachineFeatures
                     * @instance
                     */
                    Object.defineProperty(AdvancedMachineFeatures.prototype, "_enableNestedVirtualization", {
                        get: $util.oneOfGetter($oneOfFields = ["enableNestedVirtualization"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new AdvancedMachineFeatures instance using the specified properties.
                     * @function create
                     * @memberof google.container.v1.AdvancedMachineFeatures
                     * @static
                     * @param {google.container.v1.IAdvancedMachineFeatures=} [properties] Properties to set
                     * @returns {google.container.v1.AdvancedMachineFeatures} AdvancedMachineFeatures instance
                     */
                    AdvancedMachineFeatures.create = function create(properties) {
                        return new AdvancedMachineFeatures(properties);
                    };
    
                    /**
                     * Encodes the specified AdvancedMachineFeatures message. Does not implicitly {@link google.container.v1.AdvancedMachineFeatures.verify|verify} messages.
                     * @function encode
                     * @memberof google.container.v1.AdvancedMachineFeatures
                     * @static
                     * @param {google.container.v1.IAdvancedMachineFeatures} message AdvancedMachineFeatures message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AdvancedMachineFeatures.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.threadsPerCore != null && Object.hasOwnProperty.call(message, "threadsPerCore"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int64(message.threadsPerCore);
                        if (message.enableNestedVirtualization != null && Object.hasOwnProperty.call(message, "enableNestedVirtualization"))
                            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.enableNestedVirtualization);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified AdvancedMachineFeatures message, length delimited. Does not implicitly {@link google.container.v1.AdvancedMachineFeatures.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.container.v1.AdvancedMachineFeatures
                     * @static
                     * @param {google.container.v1.IAdvancedMachineFeatures} message AdvancedMachineFeatures message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AdvancedMachineFeatures.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an AdvancedMachineFeatures message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.container.v1.AdvancedMachineFeatures
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.container.v1.AdvancedMachineFeatures} AdvancedMachineFeatures
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AdvancedMachineFeatures.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.container.v1.AdvancedMachineFeatures();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.threadsPerCore = reader.int64();
                                    break;
                                }
                            case 2: {
                                    message.enableNestedVirtualization = reader.bool();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an AdvancedMachineFeatures message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.container.v1.AdvancedMachineFeatures
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.container.v1.AdvancedMachineFeatures} AdvancedMachineFeatures
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AdvancedMachineFeatures.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an AdvancedMachineFeatures message.
                     * @function verify
                     * @memberof google.container.v1.AdvancedMachineFeatures
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AdvancedMachineFeatures.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.threadsPerCore != null && message.hasOwnProperty("threadsPerCore")) {
                            properties._threadsPerCore = 1;
                            if (!$util.isInteger(message.threadsPerCore) && !(message.threadsPerCore && $util.isInteger(message.threadsPerCore.low) && $util.isInteger(message.threadsPerCore.high)))
                                return "threadsPerCore: integer|Long expected";
                        }
                        if (message.enableNestedVirtualization != null && message.hasOwnProperty("enableNestedVirtualization")) {
                            properties._enableNestedVirtualization = 1;
                            if (typeof message.enableNestedVirtualization !== "boolean")
                                return "enableNestedVirtualization: boolean expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates an AdvancedMachineFeatures message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.container.v1.AdvancedMachineFeatures
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.container.v1.AdvancedMachineFeatures} AdvancedMachineFeatures
                     */
                    AdvancedMachineFeatures.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.container.v1.AdvancedMachineFeatures)
                            return object;
                        var message = new $root.google.container.v1.AdvancedMachineFeatures();
                        if (object.threadsPerCore != null)
                            if ($util.Long)
                                (message.threadsPerCore = $util.Long.fromValue(object.threadsPerCore)).unsigned = false;
                            else if (typeof object.threadsPerCore === "string")
                                message.threadsPerCore = parseInt(object.threadsPerCore, 10);
                            else if (typeof object.threadsPerCore === "number")
                                message.threadsPerCore = object.threadsPerCore;
                            else if (typeof object.threadsPerCore === "object")
                                message.threadsPerCore = new $util.LongBits(object.threadsPerCore.low >>> 0, object.threadsPerCore.high >>> 0).toNumber();
                        if (object.enableNestedVirtualization != null)
                            message.enableNestedVirtualization = Boolean(object.enableNestedVirtualization);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an AdvancedMachineFeatures message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.container.v1.AdvancedMachineFeatures
                     * @static
                     * @param {google.container.v1.AdvancedMachineFeatures} message AdvancedMachineFeatures
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AdvancedMachineFeatures.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (message.threadsPerCore != null && message.hasOwnProperty("threadsPerCore")) {
                            if (typeof message.threadsPerCore === "number")
                                object.threadsPerCore = options.longs === String ? String(message.threadsPerCore) : message.threadsPerCore;
                            else
                                object.threadsPerCore = options.longs === String ? $util.Long.prototype.toString.call(message.threadsPerCore) : options.longs === Number ? new $util.LongBits(message.threadsPerCore.low >>> 0, message.threadsPerCore.high >>> 0).toNumber() : message.threadsPerCore;
                            if (options.oneofs)
                                object._threadsPerCore = "threadsPerCore";
                        }
                        if (message.enableNestedVirtualization != null && message.hasOwnProperty("enableNestedVirtualization")) {
                            object.enableNestedVirtualization = message.enableNestedVirtualization;
                            if (options.oneofs)
                                object._enableNestedVirtualization = "enableNestedVirtualization";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this AdvancedMachineFeatures to JSON.
                     * @function toJSON
                     * @memberof google.container.v1.AdvancedMachineFeatures
                     * @instance
              